{"componentChunkName":"component---src-templates-blog-template-js","path":"/sjincho-spring5/","result":{"data":{"cur":{"id":"4ca5bd1b-0215-5c2a-8393-2b26996520f4","html":"<p>오늘의 과제는 도메인 주도 설계와 SQL 중심 설계에 대해서 공부하고 비교해보는 것!</p>\n<h2 id=\"ddddomain-driven-design\" style=\"position:relative;\"><a href=\"#ddddomain-driven-design\" aria-label=\"ddddomain driven design permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DDD(Domain-Driven Design)</h2>\n<h3 id=\"개념\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EB%85%90\" aria-label=\"개념 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개념</h3>\n<h4 id=\"도메인\" style=\"position:relative;\"><a href=\"#%EB%8F%84%EB%A9%94%EC%9D%B8\" aria-label=\"도메인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>도메인</h4>\n<p>소프트웨어로 해결하고자하는 문제의 영역</p>\n<h4 id=\"도메인-모델\" style=\"position:relative;\"><a href=\"#%EB%8F%84%EB%A9%94%EC%9D%B8-%EB%AA%A8%EB%8D%B8\" aria-label=\"도메인 모델 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>도메인 모델</h4>\n<ul>\n<li>특정 도메인을 개념적으로 표현한 것</li>\n<li>도메인 모델을 사용하면 동일한 모습으로 도메인을 이해하고, 지식을 공유하는데 도움이 된다.</li>\n</ul>\n<h4 id=\"도메인-주도-설계\" style=\"position:relative;\"><a href=\"#%EB%8F%84%EB%A9%94%EC%9D%B8-%EC%A3%BC%EB%8F%84-%EC%84%A4%EA%B3%84\" aria-label=\"도메인 주도 설계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>도메인 주도 설계</h4>\n<ul>\n<li>도메인 패턴을 중심에 놓고 설계하는 방식</li>\n</ul>\n<h3 id=\"특징\" style=\"position:relative;\"><a href=\"#%ED%8A%B9%EC%A7%95\" aria-label=\"특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>특징</h3>\n<ul>\n<li>데이터 중심의 접근법이 아니라 도메인의 모델과 로직에 집중한다.</li>\n<li>보편적인 언어를 사용한다.</li>\n<li>분석 모델과 설계, 코드가 모두 다른 구조가 아닌 도메인 모델부터 코드까지 항상 움직이는 구조의 모델을 지향한다.</li>\n</ul>\n<h2 id=\"sql-중심-설계\" style=\"position:relative;\"><a href=\"#sql-%EC%A4%91%EC%8B%AC-%EC%84%A4%EA%B3%84\" aria-label=\"sql 중심 설계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SQL 중심 설계</h2>\n<h3 id=\"정의\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%9D%98\" aria-label=\"정의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정의</h3>\n<ul>\n<li>데이터베이스의 설계에서 시작되는 소프트웨어 개발 방법론중 하나</li>\n</ul>\n<h3 id=\"특징-1\" style=\"position:relative;\"><a href=\"#%ED%8A%B9%EC%A7%95-1\" aria-label=\"특징 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>특징</h3>\n<ul>\n<li>데이터베이스 구조와 데이터 흐름을 중심으로 시스템을 설계하고 개발 프로세스를 진행한다.</li>\n</ul>\n<h2 id=\"차이점\" style=\"position:relative;\"><a href=\"#%EC%B0%A8%EC%9D%B4%EC%A0%90\" aria-label=\"차이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>차이점</h2>\n<table>\n<thead>\n<tr>\n<th>DDD 설계</th>\n<th>SQL 중심 설계</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>도메인 중심 설계</td>\n<td>데이터베이스 중심 설계</td>\n</tr>\n<tr>\n<td>도메인의 문제 영역을 중심으로 설계</td>\n<td>데이터베이스 구조와 데이터의 흐름을 중심으로 설계</td>\n</tr>\n<tr>\n<td>도메인 모델을 통해 도메인 일관성 유지</td>\n<td>데이터베이스 정규화를 통해 데이터 일관성 유지</td>\n</tr>\n<tr>\n<td>도메인 모델을 통해 비즈니스 로직 처리</td>\n<td>데이터베이스 쿼리를 통해 데이터 처리</td>\n</tr>\n<tr>\n<td>도메인 모델이 변경되더라도 시스템의 일부분만 변경</td>\n<td>데이터베이스 구조가 변경되면 시스템 전체에 영향</td>\n</tr>\n</tbody>\n</table>\n<p><a href=\"https://diary-blockchain.tistory.com/283\">출처</a></p>\n<blockquote>\n<p>하루만에 파악할 수 있는 개념이 아니기 때문에 간단하게 정리했다😏 내가 접해본 방식은 SQL 중심 설계이기 때문에 기회가 된다면 도메인 주도 설계를 접해보고 깊에 알아가봐야지!</p>\n</blockquote>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#ddddomain-driven-design\">DDD(Domain-Driven Design)</a></p>\n<ul>\n<li>\n<p><a href=\"#%EA%B0%9C%EB%85%90\">개념</a></p>\n<ul>\n<li><a href=\"#%EB%8F%84%EB%A9%94%EC%9D%B8\">도메인</a></li>\n<li><a href=\"#%EB%8F%84%EB%A9%94%EC%9D%B8-%EB%AA%A8%EB%8D%B8\">도메인 모델</a></li>\n<li><a href=\"#%EB%8F%84%EB%A9%94%EC%9D%B8-%EC%A3%BC%EB%8F%84-%EC%84%A4%EA%B3%84\">도메인 주도 설계</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%ED%8A%B9%EC%A7%95\">특징</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#sql-%EC%A4%91%EC%8B%AC-%EC%84%A4%EA%B3%84\">SQL 중심 설계</a></p>\n<ul>\n<li><a href=\"#%EC%A0%95%EC%9D%98\">정의</a></li>\n<li><a href=\"#%ED%8A%B9%EC%A7%95-1\">특징</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%B0%A8%EC%9D%B4%EC%A0%90\">차이점</a></p>\n</li>\n</ul>\n</div>","excerpt":"오늘의 과제는 도메인 주도 설계와 SQL 중심 설계에 대해서 공부하고 비교해보는 것! DDD(Domain-Driven Design) 개념 도메인 소프트웨어로 해결하고자하는 문제의 영역 도메인 모델 특정 도메인을 개념적으로 표현한 것 도메인 모델을 사용하면 동일한 모습으로 도메인을 이해하고, 지식을 공유하는데 도움이 된다. 도메인 주도 설계 도메인 패턴을 중심에 놓고 설계하는 방식 특징 데이터 중심의 접근법이 아니라 도메인의 모델과 로직에 집중한다. 보편적인 언어를 사용한다. 분석 모델과 설계, 코드가 모두 다른 구조가 아닌 도메인 모델부터 코드까지 항상 움직이는 구조의 모델을 지향한다. SQL 중심 설계 정의 데이터베이스의 설계에서 시작되는 소프트웨어 개발 방법론중 하나 특징 데이터베이스 구조와 데이터 흐름을 중심으로 시스템을 설계하고 개발 프로세스를 진행한다. 차이점 DDD 설계 SQL 중심 설계 도메인 중심 설계 데이터베이스 중심 설계 도메인의 문제 영역을 중심으로 설계 데이터…","frontmatter":{"date":"August 03, 2023","title":"과제5) DDD와 SQL 중심 설계","categories":"스진초 자바","author":"화나","emoji":"🐢"},"fields":{"slug":"/sjincho-spring5/"}},"next":{"id":"58cb34ea-3fef-59e6-97e8-d07c3a4ee81b","html":"<p>제어의 역전과 의존관계 주입.. 영어로 보면 더 무슨 뜻인지 모르겠다. Inversion of Control, Dependency Injection 🙄 느에..?</p>\n<p>두 용어에 대한 정의가 한번에 머리속에 들어오지는 않는다. 하지만 자바로 된 프로그램에 스프링을 적용하는 법을 배우다보면 어느새 은근슬쩍 내 머리에 들어와 있는 경험을 할 수 있다! 오늘은 <a href=\"https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%95%B5%EC%8B%AC-%EC%9B%90%EB%A6%AC-%EA%B8%B0%EB%B3%B8%ED%8E%B8\">강의</a>를 들으면서 몸소 체험했던 IoC와 DI에 대해서 적어보려고 한다.(틀릴 수 있음 주의!🚨)</p>\n<h2 id=\"문제점\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\"문제점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제점</h2>\n<p>IoC와 DI가 적용되지 않은 프로그램은 아래와 같이 클라이언트 코드가 스스로 서버 객체를 생성하고 연결하고 실행했다. <br></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">OrderService</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">DiscountPolicy</span> discountPolicy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RateDiscountPolicy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>수정이 필요할 경우 구현 객체를 클라이언트 코드에서 직접 수정해야 한다. 이럴경우 <strong>객체지향적인 설계원칙을 위반</strong>하게 된다. 그래서 클라이언트가 구현 객체와 상관없이 인터페이스에만 의존하도록 변경하여야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">OrderService</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">DiscountPolicy</span> discountPolicy<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드로 변경하면 객체지향적으로 설계한 것이지만 구현 객체가 없기 때문에 실행이 되지 않는다. 결국 구현 객체를 누군가 생성해서 대신 주입해주어야 한다.</p>\n<h2 id=\"해결방법\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EA%B2%B0%EB%B0%A9%EB%B2%95\" aria-label=\"해결방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해결방법</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">//객체를 생성해서 주입해주는 역할</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppConfig</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">OrderService</span> <span class=\"token function\">orderService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n        <span class=\"token comment\">//OrderServiceImpl에 어떤 구현 객체를 주입할지는 여기에서 결정한다.</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OrderServiceImpl</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RateDiscountPolicy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">OrderService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\r\n    <span class=\"token comment\">//인터페이스에만 의존</span>\r\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">DiscountPolicy</span> discountPolicy<span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\">//생성자를 통해서 생성된 객체 주입 받음</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">OrderServiceImpl</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DiscountPolicy</span> discountpolicy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>discountpolicy <span class=\"token operator\">=</span> discountpolicy<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">AppConfig</code>가 객체를 생성해서 주입해주기 때문에 <code class=\"language-text\">OrderServiceImpl</code>은 구현 객체를 신경쓰지 않고 실행에만 집중하면 된다.</li>\n<li>이렇게 프로그램의 제어의 흐름을 클라이언트(OrderServiceImpl)가 직접 제어하는 것이 아니라 외부(AppConfig)에서 제어하는 것을 <strong>제어의 역전</strong>이라고 한다.</li>\n<li>외부에서 실제 구현 객체를 생성하고 클라이언트에게 전달해서 클라이언트와 서버의 실제 의존관계가 연결되는 것을 <strong>의존관계 주입</strong>이라고 한다.</li>\n<li>의존관계가 주입되면 클라이언트측에서 코드를 변경하지 않고, 클라이언트가 호출하는 대상의 타입을 변경할 수 있다.</li>\n</ul>\n<h2 id=\"스프링-적용하기\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"스프링 적용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스프링 적용하기</h2>\n<p>AppConfig를 사용해서 개발자가 직접 객체를 생성하고 의존관계 주입을 하던 것을 스프링에게 떠넘길수 있다😁</p>\n<p>AppConfig에 <code class=\"language-text\">@Configuration</code> 어노테이션을 붙여주면 스프링 컨테이너는 AppConfig를 프로그램의 설정정보로 사용한다. AppConfig안에 있는 메소드들에 <code class=\"language-text\">@Bean</code> 어노테이션을 붙여주면 모두 스프링 컨테이너에 등록한다.</p>\n<p>이제 스프링 컨테이너에서 스프링 빈으로 등록된 객체를 꺼내쓰면 된다.</p>\n<p>여기까지 보면 ‘그래도 개발자가 설정정보에 객체를 반환하는 메소드를 만들어서 의존관계를 주입해줘야 하는거 아닌가?’ 라는 생각이 들 수도 있다.</p>\n<p>맞다. 지금까지는 AppConfig에 프로그램에서 사용할 객체를 반환하는 메소드를 작성해서 하나하나 스프링 컨테이너에 등록했지만, 갯수가 많아지면 관리하는데 한계가 있다.</p>\n<p>그래서 스프링에서는 <code class=\"language-text\">@ComponentScan</code> 이라는 어노테이션을 제공한다. 설정정보 파일에 <code class=\"language-text\">@ComponentScan</code>를 붙이면 <code class=\"language-text\">@Conponent</code>가 붙은 클래스를 모두 빈으로 등록하고 이렇게 등록한 빈을 <code class=\"language-text\">@Autowired</code>를 활용해서 의존관계 주입을 해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ComponentScan</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppConfig</span><span class=\"token punctuation\">{</span>\r\n\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게만 하면 된다.</p>\n<blockquote>\n<p>내생각🙃 : 스프링에서 제공하는 어노테이션을 붙이면 프로그램의 흐름을 제어하면서 의존관계 주입까지 다 알아서 해준다.</p>\n</blockquote>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EB%AC%B8%EC%A0%9C%EC%A0%90\">문제점</a></li>\n<li><a href=\"#%ED%95%B4%EA%B2%B0%EB%B0%A9%EB%B2%95\">해결방법</a></li>\n<li><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0\">스프링 적용하기</a></li>\n</ul>\n</div>","frontmatter":{"date":"August 01, 2023","title":"과제4) 제어의 역전과 의존관계 주입","categories":"스진초 자바","author":"화나","emoji":"🐢"},"fields":{"slug":"/sjincho-spring4/"}},"prev":{"id":"7ec45c1a-0b63-5bf3-aa04-f8afdf7c3bdb","html":"<h3 id=\"dtodata-transfer-object\" style=\"position:relative;\"><a href=\"#dtodata-transfer-object\" aria-label=\"dtodata transfer object permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DTO(Data Transfer Object)</h3>\n<ul>\n<li>데이터 이동 객체라는 의미를 갖는다.</li>\n<li>계층 간 데이터를 주고 받을 때 사용하며 로직을 갖지않는 순수한 데이터 객체이다.</li>\n<li>데이터를 어떤 방식으로 초기화하느냐에 따라서 가변객체/불변객체로 구분된다.</li>\n</ul>\n<h4 id=\"가변객체--setter로-데이터를-초기화하는-경우\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EB%B3%80%EA%B0%9D%EC%B2%B4--setter%EB%A1%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%B4%88%EA%B8%B0%ED%99%94%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0\" aria-label=\"가변객체  setter로 데이터를 초기화하는 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가변객체 : setter로 데이터를 초기화하는 경우</h4>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"불변객체--생성자로-데이터를-초기화-하는-경우\" style=\"position:relative;\"><a href=\"#%EB%B6%88%EB%B3%80%EA%B0%9D%EC%B2%B4--%EC%83%9D%EC%84%B1%EC%9E%90%EB%A1%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%B4%88%EA%B8%B0%ED%99%94-%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0\" aria-label=\"불변객체  생성자로 데이터를 초기화 하는 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>불변객체 : 생성자로 데이터를 초기화 하는 경우</h4>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\">//생성자</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"vovalue-object\" style=\"position:relative;\"><a href=\"#vovalue-object\" aria-label=\"vovalue object permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>VO(Value Object)</h3>\n<ul>\n<li>값 자체를 표현하는 객체</li>\n<li>객체의 불변성을 보장하고 값을 읽는 것만 가능하다.</li>\n<li>서로 다른 이름을 가진 VO더라도 모든 속성 값이 같다면 두 인스턴스는 같은 객체라고 할 수 있다. 이를 보장하기 위해서는 Object 클래스의 <code class=\"language-text\">equals()</code> 와 <code class=\"language-text\">hashCode()</code>를 오버라이딩 해야한다.</li>\n</ul>\n<h3 id=\"entity\" style=\"position:relative;\"><a href=\"#entity\" aria-label=\"entity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Entity</h3>\n<ul>\n<li>데이터베이스 테이블과 1:1로 매핑되는 클래스로 DB 테이블 내의 컬럼만 필드로 가져야 한다.</li>\n<li>Entity를 기준으로 테이블이 생성되고 스키마가 변경되기 때문에 요청이나 응답값을 전달하는 클래스로 사용하면 안된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>persistence<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token annotation punctuation\">@Entity</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\r\n   <span class=\"token annotation punctuation\">@Id</span>\r\n   <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\r\n   privae <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\r\n\r\n   <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>nullable <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\r\n   <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\r\n\r\n   <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>nullable <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\r\n   <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> email<span class=\"token punctuation\">;</span>\r\n\r\n   <span class=\"token annotation punctuation\">@Builder</span>\r\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> email<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\r\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>email <span class=\"token operator\">=</span> email<span class=\"token punctuation\">;</span>\r\n   <span class=\"token punctuation\">}</span>\r\n\r\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> email<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\r\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>email <span class=\"token operator\">=</span> email<span class=\"token punctuation\">;</span>\r\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\r\n   <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"비교하기\" style=\"position:relative;\"><a href=\"#%EB%B9%84%EA%B5%90%ED%95%98%EA%B8%B0\" aria-label=\"비교하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비교하기</h3>\n<table>\n<thead>\n<tr>\n<th>DTO</th>\n<th>VO</th>\n<th>Entity</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>레이어 간 데이터 전송만을 위한 객체</td>\n<td>값을 표현하기 위한 객체</td>\n<td>DB 테이블을 매핑하기 위한 객체</td>\n</tr>\n<tr>\n<td>가변성, 읽고 쓰는 것 모두 가능</td>\n<td>불변성, 읽는것만 가능</td>\n<td>가변성, 읽고 쓰는 것 모두 가능</td>\n</tr>\n<tr>\n<td>로직을 포함할 수 없음</td>\n<td>로직을 포함할 수 있음</td>\n<td>로직을 포함할 수 있음</td>\n</tr>\n</tbody>\n</table>\n<p><a href=\"https://devmoony.tistory.com/180\">출처1</a>\r\n<a href=\"https://youngjinmo.github.io/2021/04/dto-vo-entity/\">출처2</a></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#dtodata-transfer-object\">DTO(Data Transfer Object)</a></p>\n<ul>\n<li><a href=\"#%EA%B0%80%EB%B3%80%EA%B0%9D%EC%B2%B4--setter%EB%A1%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%B4%88%EA%B8%B0%ED%99%94%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0\">가변객체 : setter로 데이터를 초기화하는 경우</a></li>\n<li><a href=\"#%EB%B6%88%EB%B3%80%EA%B0%9D%EC%B2%B4--%EC%83%9D%EC%84%B1%EC%9E%90%EB%A1%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%B4%88%EA%B8%B0%ED%99%94-%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0\">불변객체 : 생성자로 데이터를 초기화 하는 경우</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#vovalue-object\">VO(Value Object)</a></p>\n</li>\n<li>\n<p><a href=\"#entity\">Entity</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%B9%84%EA%B5%90%ED%95%98%EA%B8%B0\">비교하기</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"August 04, 2023","title":"과제6) Entity, VO, DTO","categories":"스진초 자바","author":"화나","emoji":"🐢"},"fields":{"slug":"/sjincho-spring6/"}},"site":{"siteMetadata":{"siteUrl":"https://www.hwana.com","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/sjincho-spring5/","nextSlug":"/sjincho-spring4/","prevSlug":"/sjincho-spring6/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}