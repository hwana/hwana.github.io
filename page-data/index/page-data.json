{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"ec810481-f901-5a46-b9bf-884372e95659","excerpt":"자바 강의 완강 후 시작 된 개인 프로젝트! 키오스크 만들기이다. 1차 기능 구현은 완료했지만 아직 부족한 부분이 많이 보인다. 선택 요구사항을 구현하면서 차차 고쳐나가봐야지! Main.java 프로젝트의 메인 클래스 KioskApp 객체를 생성한 후  메소드로 메뉴를 세팅하고,  메소드로 키오스크를 실행했다. KioskApp.java 키오스크 실행 클래스, 메뉴를 출력하는 메소드를 오버로딩하여 사용했다. 인스턴스 변수  : 상세 메뉴 전체를 담는 리스트  : 메인 메뉴를 담는 리스트  ,  ,  ,  : 각각의 상세메뉴를 담는 리스트 인스턴스 메소드  : 키오스크 실행 전, 메뉴를 세팅하는 메소드  : 키오스크 실행 메소드  : 메인 메뉴 출력 메소드  : 상세 메뉴 출력 메소드 Menu.java 메인메뉴 클래스  : 선택한 메뉴를 화면에 출력함 Product.java 상세 메뉴 클래스  : 상속받은 Menu의  메소드를 재정의해서 사용함 Order.java 주문 클래스, 주문에…","frontmatter":{"categories":"내일배움캠프","title":"내일배움캠프) 키오스크 만들기","date":"October 19, 2023"},"fields":{"slug":"/naebaecamp/project/java-solo-project/"}}},{"node":{"id":"88f3cce4-c123-5270-bdb3-e41f4b2c64ee","excerpt":"📝 오늘의 내용정리 키오스크 만들기 🔚 오늘의 마무리 키오스크 앱의 기능 구현을 마무리 했다. 단순히 기능 구현에만 초점을 맞추느라 예외 상황에 대한 처리가 부족하다. 객체지향적으로 코드를 구현했는지 스스로에게 물어봤을때 음..?! 이라는 생각이 바로 들고 확신이 없었다. 그렇다면 수정을 해야할 부분이 많다는 뜻이겠지😂 ✅내일의 할 일 선택 요구사항 구현하기 코드 객체지향적으로 리팩토링하기 모르겠으면 튜터님에게 조언 얻기! 예외 상황 처리하기","frontmatter":{"categories":"TIL","title":"TIL) 20231019","date":"October 19, 2023"},"fields":{"slug":"/naebaecamp/today-i-learned/20231019/"}}},{"node":{"id":"3b835850-8bed-57f2-bf8d-729014e40a4d","excerpt":"✅ 오늘 한 일 키오스크 프로그램 구현 🔚 오늘의 마무리 오늘부터 자바 개인 프로젝트가 시작되었다. 키오스크 프로그램을 만드는 것이다. 화면없이 Scanner로 입력받아서 콘솔에 출력하는 형태로 제작하면 된다. 요구사항에 맞게 클래스들을 생성했다. 공통으로 동작하는 기능들은 메소드로 분리하려고 노력했다. 아직 초반이라 큰 오류나 알게된 점은 없지만, 오랜만에 자바의 개념에 집중하면서 코드를 짜다보니 시간이 훌쩍갔다. 내일 이어서 마저 해야지!","frontmatter":{"categories":"TIL","title":"TIL) 20231018","date":"October 18, 2023"},"fields":{"slug":"/naebaecamp/today-i-learned/20231018/"}}},{"node":{"id":"db7b75ca-469b-5605-a548-69cedd25812c","excerpt":"개요 자바는 실행 시 발생할 수 있는 프로그램의 오류(런타임 에러)를 에러와 예외 두가지로 구분하였다. 에러 : 프로그램 코드에 의해서 수습될 수 없는 심각한 오류 예외 : 프로그램 코드에 의해서 수습될 수 있는 오류 에러는 프로그램이 비정상적으로 종료되는걸로 끝나지만, 예외는 적절한 코드를 미리 작성해놓음으로써 프로그램의 비정상적인 종료를 막을 수있다. 예외 클래스의 계층구조   Exception 클래스는 체크 예외(checked exception)과 언체크 예외(unchecked exception) 으로 구분된다. 체크예외(Checked Exception) Exception 클래스의 하위 클래스 중 RuntimeException 클래스를 상속받지 않는 클래스 체크예외가 발생할 수 있는 메소드를 사용할 경우 반드시 예외를 처리하는 코드를 같이 작성해야 한다. 예외처리를 해주지 않는다면 컴파일 에러가 발생한다. 위처럼 체크예외가 예외를 강제하기 때문에 예외를 누락시키지 않는다는 장…","frontmatter":{"categories":"자바","title":"예외처리","date":"October 17, 2023"},"fields":{"slug":"/java/java-exception/"}}},{"node":{"id":"4f03073c-7161-5dde-a987-76234e8a474e","excerpt":"📝 오늘의 내용정리 예외처리 체크예외 : 프로그램 외적인 요인에서 발생할 수 있는 예외로 언제든지 발생할 수 있기때문에 컴파일 과정에서 에러처리를 강제함\r\n언체크예외 : 개발자의 실수로 발생한 예외로 코드에서 적절한 처리가 가능하여 예외처리가 강제되지 않음 이렇게 이해했는데 맞을까..?! 🔚 오늘의 마무리 오늘 드디어 자바 강의를 완강했다! 쓰레드, 람다, 스트림등 한번 들어서 머리에 들어오지 않는 내용들이 많았지만 천천히 이해하기로 했다😅 예외처리에 대해서 정리를 했는데 아직 사용에 익숙하지 않아서 와닿지 않는다. 앞으로 코드 짜면서 익숙해져야겠다!","frontmatter":{"categories":"TIL","title":"TIL) 20231017","date":"October 17, 2023"},"fields":{"slug":"/naebaecamp/today-i-learned/20231017/"}}},{"node":{"id":"c9288a31-efcc-51fb-a540-036761d00c97","excerpt":"개요 컬렉션 프레임워크는 다수의 데이터를 저장하는 클래스들을 표준화한 설계이다.\r\n\r\nJDK 1.2 이전까지는 다수의 데이터를 다루기 위해서 Vector, Hashtable, Propeties와 같은 클래스를 제공했지만, 서로 각자 다른 방식으로 처리해야 했다. JDK 1.2 부터는 컬렉션 프레임워크가 등장하면서 모든 컬렉션 클래스를 표준화된 방식으로 다룰 수 있게되었다.\r\n\r\n 구성요소 \r\n이미지 출처 컬렉션 프레임워크에서는 List, Set, Map 3가지 타입의 인터페이스를 정의하였다. 그리고 공통된 부분을 다시 추출하여 Collection 인터페이스로 정의하였다. Map은 다른 두 인터페이스와 다른 형태(key, value)로 데이터를 다루기 때문에 Collection 인터페이스에 포함되지 못하였다. 인터페이스 특징 구현 클래스 List 순서가 있으며 데이터의 중복을 허용한다. ArrayList, LinkedList, Vector 등 Set 순서가 없으며 데이터의 중복을 허…","frontmatter":{"categories":"자바","title":"Collections","date":"October 16, 2023"},"fields":{"slug":"/java/java-collections/"}}},{"node":{"id":"1b532a65-58bc-5717-98af-b4ce1dbcb527","excerpt":"📝 오늘의 내용정리 Collections 🔚 오늘의 마무리 내일까지 자바 강의를 마무리하는걸 목표로 하고 있기 때문에, 오늘도 역시나 자바 강의를 들었다. 오늘 들었던 강의들은 예전에 블로그에 내용정리해 놓은 이론위주라 강의에 집중하면서 알고있던 내용들을 한번 더 상기시켰다. 컬렉션 프레임워크를 내용정리하면서 Map은 List, Set과 같은 인터페이스에 속하지 않는다는것도 알게되었다. 코드를 짜는데 큰 영향을 끼치는 이론은 아니지만,, 난 이런점을 알면서 코드를 짜면 더 재미있다. 오늘은 시간이 많지 않아서 컬렉션 프레임워크의 간단한 내용만 정리했지만, 추후 시간이 난다면 메소드들도 정리해야겠다😁","frontmatter":{"categories":"TIL","title":"TIL) 20231016","date":"October 16, 2023"},"fields":{"slug":"/naebaecamp/today-i-learned/20231016/"}}},{"node":{"id":"b9218cb3-1a68-5a1e-aa94-9c3a8109d363","excerpt":"자주 쓰면서 어떤 메소드가 있는지 정확하게 모르고 썼던 Arrays 클래스!\r\n이번에 확실하게 머리에 넣자! 👀 배열을 다루기 위한 다양한 메소드가 포함되어 있다. 모두 클래스 메소드 이므로 객체를 생성하지 않고 클래스명으로 접근하여 바로 생성할 수 있다.  전달받은 배열을 고정 크기의 리스트로 변환하여 반환함 실행결과 list1: [오렌지, 바나나, 체리, 딸기] : 원래 배열과 같은 주소를 바라보는 리스트\r\nlist2: [사과, 바나나, 체리, 딸기] : 새로운 객체가 생성되어 별개의 주소값을 가지는 리스트  전달받은 배열에서 특정 값의 위치를 이진 검색 알고리즘을 사용하여 검색한 후 해당 인덱스를 반환하고 찾지 못한 경우 음수 값을 반환함 이진 검색 알고리즘을 사용하므로 전달되는 배열이 미리 정렬되어 있어야 제대로 동작함 실행 결과 요소 10는 배열에서 인덱스 4에 있습니다.  전달받은 배열의 특정 길이만큼을 새로운 배열로 복사하여 반환함(깊은복사) 새로운 배열의 길이가 원본…","frontmatter":{"categories":"자바","title":"Arrays class","date":"October 13, 2023"},"fields":{"slug":"/java/java-arrays-class/"}}},{"node":{"id":"dcd65509-e518-55c6-a69c-739893c3f876","excerpt":"배열은 한번 생성하면 길이를 변경할 수 없다. 배열의 길이를 변경하기 위해서는 새로운 배열을 생성하고 데이터를 복사해야 한다. 배열을 복사하는 방법에는 얕은복사와 깊은복사가 있다. 얕은복사 얕은복사는 배열의 복사본이 원본 배열과 동일한 객체를 참조한다. 배열의 주소만 복사되고, 내부 요소들은 복사되지 않는다. 요소를 변경하게 되면 두 배열의 모든 값이 변경된다. 깊은복사 깊은복사는 원본 배열과 복사본이 서로 다른 객체를 참조한다. 하나의 배열을 변경해도 다른 배열에는 영향을 주지 않는다.","frontmatter":{"categories":"자바","title":"배열의 얕은복사와 깊은복사","date":"October 13, 2023"},"fields":{"slug":"/java/java-arrays-copy/"}}},{"node":{"id":"d9e6b7b1-372e-59af-9dff-db84d8849f61","excerpt":"📝 오늘의 내용정리 배열의 얕은복사와 깊은복사 Arrays class 🔚 오늘의 마무리 오랜만에 자바 기초 인강을 들으니까 새롭다. 배열을 공부하던 중 얕은복사와 깊은복사의 이해가 필요해서 내용을 정리했다. 코테를 풀면서 배열을 사용할 때 Arrays클래스를 자주 이용했는데 어떤 메소드가 있는지 정확히 이해하지 못하고 그냥 사용했다. 조금 더 알면서 사용하고 싶어서 내용정리를 했다. 내일도 강의 열심히 들어야지! 📝 오늘의 내용정리 🔚 오늘의 마무리","frontmatter":{"categories":"TIL","title":"TIL) 20231013","date":"October 13, 2023"},"fields":{"slug":"/naebaecamp/today-i-learned/20231013/"}}},{"node":{"id":"3bc1db4a-f61e-504f-b6ec-a6ee25b9b943","excerpt":"내일배움캠프 미니프로젝트를 마치며 6조 팀원들과 함께 KPT를 작성해 보고자 한다. “근데 KPT가 뭐지?”  Keep, Problem, Try의 약자로 회고 내용을 세 가지 관점으로 분류하고 회고를 진행하는 회고 방법론 중 하나라고 한다… 는데 바로 시작해보자! KEEP - 좋았던 부분, 계속해서 유지되었으면 하는 부분 모르는 부분이 생길때 스스로 해결해보려 노력하고, 문제가 있을 땐 주저없이 질문하고, 반대의 상황에서도 주저 없이 서로 도와주었다. 각자 맡은 기능들을 완벽하게 구현하기 위해 모두 성실하게 임했다. 협업 경험을 위한 Git hub repository 생성과 기능별 branch 생성이 잘 이루어 졌다. PROBLEM - 잘되지 않았던 부분, 문제라고 생각하는 부분 프로젝트 기간이 너무 짧아서 개발 일정을 구체화 할 수 없었다. 회의록 작성을 하지 못했다. JavaScript 비동기 처리에 대한 이해가 부족했다. TRY - Problem을 해결할 수 있도록 실천해 보…","frontmatter":{"categories":"내일배움캠프 회고","title":"내일배움캠프) 미니프로젝트 KPT 회고","date":"October 12, 2023"},"fields":{"slug":"/naebaecamp/review/miniproject-review/"}}},{"node":{"id":"70a9c435-b2f5-5b1c-96c1-1500b4f8bae0","excerpt":"생성자 주입 생성자를 통해서 의존관계를 주입 받는 방식 생성자 호출 시점에서 딱 한번만 호출되는 것이 보장되어 불변이나 필수 의존관계에 사용한다. 클래스에 생성자가 한개라면 를 생략해도 자동주입이 된다. 수정자 주입(setter) 수정자 메소드를 통해서 의존관계를 주입하는 방식 선택이나 변경 가능성이 있는 의존관계에 주로 사용한다. 필드 주입 필드에 바로 주입하는 방법으로 외부에서 변경이 불가능하다. 잘 사용하지 않지만 테스트 코드에서 종종 사용하기도 한다. 생성자 주입을 사용해야 하는 이유 객체의 불변성을 확보해주기 때문이다. 실제로 개발을 하다보면 의존관계의 변경이 필요한 상황은 거의 없으므로 수정의 가능성을 열어둘 필요가 없다. 그러므로 생성자 주입을 통해서 변경의 가능성을 없애고 불변성을 보장하는 것이 좋다고 생각한다. 생성자 주입 수정자 주입(setter) 필드 주입 생성자 주입을 사용해야 하는 이유","frontmatter":{"categories":"스진초","title":"과제11) 의존성 주입 방법","date":"August 22, 2023"},"fields":{"slug":"/sjincho/sjincho-spring11/"}}},{"node":{"id":"24c665df-6f7b-5814-8dd5-9eec6163a251","excerpt":"POST 요청된 리소스 생성 GET 요청 URI의 데이터를 조회하여 응답 PATCH 요청된 리소스 부분 수정 PUT 요청된 리소스 전체 수정 DELETE 요청된 리소스 삭제 HEAD GET 메소드와 동일하게 동작하지만 응답 바디는 포함하지 않음 CONNECT 대상 리소스로 식별된 서버에 대한 터널을 설정 OPTIONS 웹서버에서 지원되는 메소드의 종류를 확인할 경우 사용 TRACE 대상 리소스에 대한 경로를 따라 메시지 루프백 테스트를 수행 POST GET PATCH PUT DELETE HEAD CONNECT OPTIONS TRACE","frontmatter":{"categories":"스진초","title":"과제10) HTTP METHOD","date":"August 14, 2023"},"fields":{"slug":"/sjincho/sjincho-spring10/"}}},{"node":{"id":"92b9d746-a417-5cfc-b78f-b2bdfe2fd97d","excerpt":"REST? REST는 Representational State Transfer의 약자로, 자원을 정의하고 자원에 대한 주소를 지정하는 방법의 모음 REST 제약조건 REST의 제약조건을 제대로 지키면서 아키텍처를 만드는것을 RESTful이라고 한다. 클라이언트 - 서버 구조 서버는 API제공, 클라이언트는 세션, 로그인정보등을 직접 관리하는 구조로 각각의 역할이 확실하게 구분됨 개발해야할 내용이 명확해지고 서로간의 의존성이 줄어들게 됨 무상태성 서버는 클라이언트의 상태 정보를 저장하지 않음 캐시 가능 REST는 HTTP의 웹표준을 그대로 사용하기 때문에, HTTP가 가진 캐싱 기능 적용 가능 계층화 시스템 REST 서버는 다중 계층으로 구성될 수 있음 자체 표현 구조 REST API 메시지만 보고 쉽게 이해할 수 있음 유니폼 인터페이스(uniform interface) URI로 지정한 리소스에 대한 조작을 통일되고 한정적인 인터페이스로 수행하는 아키텍처 스타일 REST API의 구…","frontmatter":{"categories":"스진초","title":"과제9) REST API 30초만에 이해하기","date":"August 12, 2023"},"fields":{"slug":"/sjincho/sjincho-spring9/"}}},{"node":{"id":"e6949318-bfa9-538d-aca2-5498fd16a62c","excerpt":"개발자가 작성한 클래스를 빈으로 등록하기 위한 어노테이션이다.  , , , , 이 붙은 클래스를 찾아서 컨텍스트에 빈으로 등록해주는 어노테이션이다.  개발자가 직접 제어가 불가능한 외부 라이브러리등을 빈으로 만들려할 때 사용되는 어노테이션이다. 외부 라이브러리 객체를 반환하는 메소드를 만들고 @Bean 어노테이션을 사용하면 된다.  해당 클래스가 컨트롤러 역할을 한다는 것을 알려준다.  해당 클래스가 비즈니스 로직을 수행한다는 것을 의미한다.  해당 클래스가 DB에 접근하는 메소드를 포함 한다는 것을 알려준다.  요청 URI와 어노테이션에 작성된 value 값이 일치하면 해당 클래스가 실행된다.  HTTP 요청 바디를 자바 객체로 매핑해준다.  자바 객체를 HTTP 응답 바디로 매핑해준다.  필드, setter, 생성자에서 사용하며, 빈을 주입해준다.","frontmatter":{"categories":"스진초","title":"과제8) 스프링에서 사용하는 어노테이션","date":"August 11, 2023"},"fields":{"slug":"/sjincho/sjincho-spring8/"}}},{"node":{"id":"16426be2-1bd8-5359-b07b-676c27d8ba8e","excerpt":"스프링은 각 클래스를 빈으로 등록하기 위해서 라는 어노테이션을 제공하지만, 실제 개발을 할 때는 보다 , , 를 더 많이 사용하게 되는 것 같다. 왜 를 사용하지 않고 의 하위개념인 어노테이션을 따로 제공하는걸까? 답을 찾기 위해 스프링 공식문서를 살펴봤더니 아래와 같은 문장이 있었다. Therefore, you can annotate your component classes with @Component, but, by annotating them with @Repository, @Service, or @Controller instead, your classes are more properly suited for processing by tools or associating with aspects. 를 사용하여 클래스에 주석을 달 수 있지만 , , 을 사용하는게 도구를 활용한 처리나 다양한 측면과의 연관성을 더 적절하게 갖출 수 있다고 나와있다. 너무 번역말투라 느낌가는대로 받아들…","frontmatter":{"categories":"스진초","title":"과제7) Controller, Service, Repository","date":"August 08, 2023"},"fields":{"slug":"/sjincho/sjincho-spring7/"}}},{"node":{"id":"24d9b224-85c4-5a2b-b97c-890589a746b4","excerpt":"DTO(Data Transfer Object) 데이터 이동 객체라는 의미를 갖는다. 계층 간 데이터를 주고 받을 때 사용하며 로직을 갖지않는 순수한 데이터 객체이다. 데이터를 어떤 방식으로 초기화하느냐에 따라서 가변객체/불변객체로 구분된다. 가변객체 : setter로 데이터를 초기화하는 경우 불변객체 : 생성자로 데이터를 초기화 하는 경우 VO(Value Object) 값 자체를 표현하는 객체 객체의 불변성을 보장하고 값을 읽는 것만 가능하다. 서로 다른 이름을 가진 VO더라도 모든 속성 값이 같다면 두 인스턴스는 같은 객체라고 할 수 있다. 이를 보장하기 위해서는 Object 클래스의  와 를 오버라이딩 해야한다. Entity 데이터베이스 테이블과 1:1로 매핑되는 클래스로 DB 테이블 내의 컬럼만 필드로 가져야 한다. Entity를 기준으로 테이블이 생성되고 스키마가 변경되기 때문에 요청이나 응답값을 전달하는 클래스로 사용하면 안된다. 비교하기 DTO VO Entity 레이어 …","frontmatter":{"categories":"스진초","title":"과제6) Entity, VO, DTO","date":"August 04, 2023"},"fields":{"slug":"/sjincho/sjincho-spring6/"}}},{"node":{"id":"8f8c2b91-44d8-531a-96aa-5da886353222","excerpt":"오늘의 과제는 도메인 주도 설계와 SQL 중심 설계에 대해서 공부하고 비교해보는 것! DDD(Domain-Driven Design) 개념 도메인 소프트웨어로 해결하고자하는 문제의 영역 도메인 모델 특정 도메인을 개념적으로 표현한 것 도메인 모델을 사용하면 동일한 모습으로 도메인을 이해하고, 지식을 공유하는데 도움이 된다. 도메인 주도 설계 도메인 패턴을 중심에 놓고 설계하는 방식 특징 데이터 중심의 접근법이 아니라 도메인의 모델과 로직에 집중한다. 보편적인 언어를 사용한다. 분석 모델과 설계, 코드가 모두 다른 구조가 아닌 도메인 모델부터 코드까지 항상 움직이는 구조의 모델을 지향한다. SQL 중심 설계 정의 데이터베이스의 설계에서 시작되는 소프트웨어 개발 방법론중 하나 특징 데이터베이스 구조와 데이터 흐름을 중심으로 시스템을 설계하고 개발 프로세스를 진행한다. 차이점 DDD 설계 SQL 중심 설계 도메인 중심 설계 데이터베이스 중심 설계 도메인의 문제 영역을 중심으로 설계 데이터…","frontmatter":{"categories":"스진초","title":"과제5) DDD와 SQL 중심 설계","date":"August 03, 2023"},"fields":{"slug":"/sjincho/sjincho-spring5/"}}},{"node":{"id":"1c39bf34-26f2-5e6e-94de-478038ca463a","excerpt":"제어의 역전과 의존관계 주입.. 영어로 보면 더 무슨 뜻인지 모르겠다. Inversion of Control, Dependency Injection 🙄 느에..? 두 용어에 대한 정의가 한번에 머리속에 들어오지는 않는다. 하지만 자바로 된 프로그램에 스프링을 적용하는 법을 배우다보면 어느새 은근슬쩍 내 머리에 들어와 있는 경험을 할 수 있다! 오늘은 강의를 들으면서 몸소 체험했던 IoC와 DI에 대해서 적어보려고 한다.(틀릴 수 있음 주의!🚨) 문제점 IoC와 DI가 적용되지 않은 프로그램은 아래와 같이 클라이언트 코드가 스스로 서버 객체를 생성하고 연결하고 실행했다.  수정이 필요할 경우 구현 객체를 클라이언트 코드에서 직접 수정해야 한다. 이럴경우 객체지향적인 설계원칙을 위반하게 된다. 그래서 클라이언트가 구현 객체와 상관없이 인터페이스에만 의존하도록 변경하여야 한다. 위 코드로 변경하면 객체지향적으로 설계한 것이지만 구현 객체가 없기 때문에 실행이 되지 않는다. 결국 구현 객…","frontmatter":{"categories":"스진초","title":"과제4) 제어의 역전과 의존관계 주입","date":"August 01, 2023"},"fields":{"slug":"/sjincho/sjincho-spring4/"}}},{"node":{"id":"9cd0757b-0c58-52a0-8573-0e4924adea27","excerpt":"2일차 과제를 제출하면서 강사님께 질문을 드렸다.\r\n\r\n당연히 @Override가 붙어져 있어야 한다고 생각했기 때문이다. 돌아온 대답은..!\r\n 다 계획이 있으신 거였다😎 그래서 3일차의 과제는~! 오버라이딩이 뭔가요? 여러분들이 생각하실 때, 오버라이딩을 구현하려면 @Override를 꼭 적어야 하나요? 1. 오버라이딩이란? 하위 클래스가 상위 클래스의 메소드를 재정의해서 사용하는 것 2. 오버라이딩을 구현하려면 @Override를 꼭 적어야 하나요?  어노테이션은 필수는 아니지만, 작성을 해주면 컴파일 단계에서 개발자의 실수를 방지할 수 있다. Parent 클래스의 hello 메소드를 재정의해서 사용하고 싶은 경우(오버라이딩) 매개변수, 리턴타입, 메소드명을 상위 클래스의 메소드와 동일하게 작성한다면  없이도 오버라이딩된 메소드라고 인식이 된다. 하지만 위 코드는 개발자의 실수로 매개변수가 다르게 작성되어서 오버라이딩하고 싶은 개발자의 의도와 다르게 동작한다! 이때 를 붙여준…","frontmatter":{"categories":"스진초","title":"과제3) @Override 꼭 적어야 할까요?","date":"July 29, 2023"},"fields":{"slug":"/sjincho/sjincho-spring3/"}}},{"node":{"id":"a5d2d124-c682-50d6-828a-521e6ab1aa94","excerpt":"오늘도 역시나 내 머리속에 있고 나 혼자서는 응~그치그치~ 하면서 이해할 수 있는 내용이지만, 남에게 설명하려면 입이 안 떨어지고 어버버하게되는 그런 과제였다. 그 과제가 뭐냐구요..? 인터페이스가 가지고 있는 객체 지향의 특징에는 어떤 것이 있는지 그렇게 생각하는 이유는 무엇인지 자! 오늘도 머리에 있는걸 열심히 끄집어 내보자🤯\r\n 내 머릿속에 있는 생각 객체지향의 특징에는 캡슐화, 추상화, 다형성, 상속이 있다. 인터페이스는 이 속성들 4가지를 모두 가지고 있다고 생각한다. 캡슐화 인터페이스는 상수와 추상메소드만을 가질 수 있다. 추상메소드만을 가질 수 있다는 것은 메소드의 구현을 클래스에게 위임하였다는 뜻으로, 각 기능의 정의와 구현을 분리하여 캡슐화를 한 것이다. 추상화 인터페이스는 공통된 기능을 추출해서 정의한 것이기 때문에 추상화 되었다. 다형성 인터페이스를 구현한 클래스라면, 인스턴스의 참조변수 타입을 인터페이스로 할 수있다. 상속 인터페이스도 인터페이스를 상속받을 수…","frontmatter":{"categories":"스진초","title":"과제2) 인터페이스요..?","date":"July 25, 2023"},"fields":{"slug":"/sjincho/sjincho-spring2/"}}},{"node":{"id":"b11c6863-9ab3-5e93-8c2a-e6984430a47b","excerpt":"어제 첫 라이브 세션을 시작으로 스진초 과정이 시작되었다!\r\n프로그래밍은 외우는 것이 아니라 생각하고 이해하면서 해야한다고 말씀해주셨는데, 첫 과제부터 스진초의 정체성이 잘 나타나는거 같다. 내가 생각하는 캡슐화, 추상화, 다형성, 상속성 최근에 자바의 정석을 읽으면서 내용정리를 했기때문에 과제를 보고 ‘ㅎ..할만하군..’ 이라고 생각했다. 하지만 지금 이 글을 적는 이 순간 머리속에 있는 꺼내려고 하니까 쉽지않다. 그래도 최대한 적어봐야지..! 캡슐화 데이터의 무분별한 변경을 방지하기 위해서 접근제어자를 private으로 선언하여 외부의 접근을 막는 방식 추상화 추상 클래스를 상속받은 하위 클래스에게 메소드의 작성을 위임하는 방식 다형성 상위 클래스의 타입으로 하위 클래스의 인스턴스를 참조할 수 있도록 하는 방식 상속 공통된 속성을 모아놓은 클래스(상위 클래스)를 확장하여 새로운 클래스(하위 클래스)를 정의하는 방식 구글링으로 알아낸 캡슐화, 추상화, 다형성, 상속성 캡슐화 변수…","frontmatter":{"categories":"스진초","title":"과제1) 나만의 언어로 객체 지향의 특징 설명하기","date":"July 24, 2023"},"fields":{"slug":"/sjincho/sjincho-spring1/"}}},{"node":{"id":"3a5453ae-dfa9-5776-89ff-2564b8ea9477","excerpt":"문제 내 최종코드 주어진 숫자 n을 이진수로 바꿔서 String형 배열에 넣었는데 시간초과 오류가 떴다. 이전 문제처럼 char형 배열로 변경해주었더니 통과되었다. 내 최종코드","frontmatter":{"categories":"프로그래머스","title":"다음 큰 숫자","date":"July 17, 2023"},"fields":{"slug":"/codingtest/codingtest-next-big-number/"}}},{"node":{"id":"87726213-c18e-5e23-b654-f7a2804841cf","excerpt":"문제 내 최종코드 처음에 매개변수를 String 형 배열로 만든 후 eqauls 함수를 써서 비교를 했더니 효율성 테스트에서 실패를 했다. 다른 사람의 코드를 참고하여 char로 비교를 했더니 효율성 테스트에서 통과되었다. 내 최종코드","frontmatter":{"categories":"프로그래머스","title":"완벽한 괄호","date":"July 11, 2023"},"fields":{"slug":"/codingtest/codingtest-bracket/"}}},{"node":{"id":"a49dd58f-3195-575e-84e4-1ec4bcd75920","excerpt":"문제 내 최종코드 제일 첫 글자는 무조건 대문자이기 때문에 answer을 제일 첫글자로 초기화 해준다. for문을 돌면서 공백을 만난다면 answer을 공백을 더해준다. 공백이 아니라면 해당 글자의 앞이 공백인지 확인 후 앞 글자가 공백이면 대문자로 바꿔주고 아니라면 소문자로 바꿔준다. 다른 사람의 풀이 flag를 선언해서 공백을 판단한다. 내 최종코드 다른 사람의 풀이","frontmatter":{"categories":"프로그래머스","title":"JadenCase 문자열 만들기","date":"July 11, 2023"},"fields":{"slug":"/codingtest/codingtest-jadencase/"}}},{"node":{"id":"6590d456-7855-5644-9536-85a183072b79","excerpt":"문제 내 최종코드 (종류별 옷의 개수 + 1) * (종류별 옷의 개수 + 1) - 1 종류별 옷의 개수에 1을 더해주는 이유는 해당 종류의 옷을 안입는 경우 다 곱해주고 -1을 빼는 이유는 모두 안입는 경우를 빼주기 위함임 내 최종코드","frontmatter":{"categories":"프로그래머스","title":"의상","date":"July 05, 2023"},"fields":{"slug":"/codingtest/codingtest-clothes/"}}},{"node":{"id":"cca93ebb-cc28-5318-a2dc-735fff4efc08","excerpt":"문제 내 최종코드 내 최종코드","frontmatter":{"categories":"프로그래머스","title":"폰켓몬","date":"July 04, 2023"},"fields":{"slug":"/codingtest/codingtest-phoneketmon/"}}},{"node":{"id":"dcdeca8b-55a5-5f4c-9b2b-37873735bbc5","excerpt":"문제 내 최종코드 내 최종코드","frontmatter":{"categories":"프로그래머스","title":"신규 아이디 추천","date":"July 03, 2023"},"fields":{"slug":"/codingtest/codingtest-new-id-recommand/"}}},{"node":{"id":"b6505109-0a25-5067-8e04-3f5489dbe934","excerpt":"문제 내 최종코드 내 최종코드","frontmatter":{"categories":"프로그래머스","title":"개인정보 수집 유효기간","date":"June 27, 2023"},"fields":{"slug":"/codingtest/codingtest-personal-info/"}}},{"node":{"id":"2de66215-4148-59ae-86cb-adec1edd2492","excerpt":"문제 내 최종코드 arr배열을 list로 바꿔준 뒤 delete_list에 있는 숫자들을 list에서 지워준다. ArrayList의 remove()함수는 인자로 int와 Object 형태를 받을 수 있다.  : 해당 인덱스의 값이 삭제 됨  : 리스트에서 인자로 받은 객체의 값을 찾아서 첫번째로 나오는 값을 삭제 내 최종코드","frontmatter":{"categories":"프로그래머스","title":"배열의 원소 삭제하기","date":"June 26, 2023"},"fields":{"slug":"/codingtest/codingtest-array-element-delete/"}}},{"node":{"id":"db254fdf-95fb-5621-8001-96f1236aa1f4","excerpt":"문제 내 최종코드 다른 사람 풀이 i와 j가 같을 경우에만 1을 넣어주면 되기 때문에 위와 같은 코드로 작성하면 for문을 한 번만 작성해도 된다. 내 최종코드 다른 사람 풀이","frontmatter":{"categories":"프로그래머스","title":"특별한 이차원 배열1","date":"June 26, 2023"},"fields":{"slug":"/codingtest/codingtest-two-dimension-array/"}}},{"node":{"id":"8af7eace-4914-58b8-96d1-b463adf39d74","excerpt":"문제 내 최종코드 내 최종코드","frontmatter":{"categories":"프로그래머스","title":"신고 결과 받기","date":"June 25, 2023"},"fields":{"slug":"/codingtest/codingtest-report-result/"}}},{"node":{"id":"100a46cc-3a75-5d70-982e-b17e652353c0","excerpt":"문제 내 최종코드 다른사람 풀이 참고 후 수정코드 map을 초기화 해주면 map에 해당 문자가 있는지 없는지 판단하는 코드가 줄어들게 된다. 내 최종코드 다른사람 풀이 참고 후 수정코드","frontmatter":{"categories":"프로그래머스","title":"성격 유형 검사하기","date":"June 21, 2023"},"fields":{"slug":"/codingtest/codingtest-mbti/"}}},{"node":{"id":"2863a852-3a5b-5166-bd6a-6d4614b6437e","excerpt":"다형성 상위 클래스 타입의 참조변수로 하위 클래스의 인스턴스를 참조할 수 있도록 하는 것 두 클래스가 상속관계에 있을 때 상위 클래스 타입의 참조변수로 하위 클래스의 인스턴스를 참조하도록 할 수 있다.  참조변수 t로는 Tv클래스의 멤버들만 사용할 수 있다. 참조변수의 타입이 참조변수가 참조하고 있는 인스턴스에서 사용할 수 있는 멤버의 갯수를 결정한다. 참조변수와 인스턴스의 연결 메소드의 경우 실제 인스턴스의 메소드가 호출되지만 멤버변수의 경우 참조변수 타입에 따라 달라진다. 참조변수의 타입에 따라 결과가 달라지는 경우는 상위 클래스의 멤버변수와 같은 이름의 멤버변수를 하위클래스에 중복해서 정의한 경우 뿐이다. 메소드인 method()의 경우 참조변수의 타입에 관계없이 항상 실제 인스턴스 타입인 Child 클래스에 정의된 메소드가 호출되지만, 인스턴스변수인 x의 경우 참조변수 타입에 따라서 달라진다. 해당 예시는 Child 클래스에 아무런 멤버도 정의되어 있지 않기 때문에 참조변수…","frontmatter":{"categories":"자바 자바의정석","title":"다형성","date":"June 20, 2023"},"fields":{"slug":"/java/java-polymorphism/"}}},{"node":{"id":"6eee75bb-85c1-5786-ad0b-ec0fdf468808","excerpt":"문제 문제풀이 흐름 대기실의 모든 응시자 위치에 대해 반복 \r\n1-1. 좌표의 상하좌우 중 빈 테이블이 있는 방향 찾기\r\n1-2. 빈 테이블과 인접한 위치 중 응시자가 있는지 찾기 <- 거리두기를 지키지 않은 것 1의 경우를 찾지 못하면 거리두기를 지킨 것 풀이 dx, dy로 방향을 정하는 방법 \r\ndx, dy는 각각 x의 변화량, y의 변화량을 뜻한다. \r\n변화량이란 특정 방향으로 이동할 때 해당 좌표 값이 어떻게 변화하는지를 의미한다. \r\ndx, dy는 상하좌우 네 방향에 따라서 아래와 같은 값을 가진다.   상 하 좌 우 dx 0 0 -1 1 dy -1 1 0 0 맨해튼 거리  맨해튼 거리2에 도달하려면 맨해튼 거리1(상하좌우)을 거쳐야함 맨해튼 거리1이 파티션으로 막혀있다면, 맨해튼 거리2에 응시자가 있어도 거리두기 조건을 만족함 위쪽 방향의 좌표가 파티션으로 막혀있다면 위쪽 방향의 맨해튼 거리2는 더이상 추가적인 검사를 하지 않아도 되는것 처럼 보임(파란색 화살표 방향으로…","frontmatter":{"categories":"프로그래머스","title":"거리두기 확인하기","date":"June 19, 2023"},"fields":{"slug":"/codingtest/codingtest-distance/"}}},{"node":{"id":"4249ac7d-d659-5ede-b76c-13fe08ba98fd","excerpt":"문제 문제풀이 흐름 n*n 2차원 배열 선언하기 숫자를 채울 현재의 위치를 0,0 으로 설정 방향에 따라 이동할 수 없을때까지 반복하면서 숫자 채우기 \r\n3-1. 아래로 이동 \r\n3-2. 오른쪽으로 이동 \r\n3-3. 왼쪽 위로 이동  채워진 숫자를 차례대로 1차원 배열에 옮겨서 반환하기 풀이 dx, dy로 방향을 정하는 방법 \r\ndx, dy는 각각 x의 변화량, y의 변화량을 뜻한다. \r\n변화량이란 특정 방향으로 이동할 때 해당 좌표 값이 어떻게 변화하는지를 의미한다. \r\ndx, dy는 상하좌우 네 방향에 따라서 아래와 같은 값을 가진다.   상 하 좌 우 dx 0 0 -1 1 dy -1 1 0 0 n*n 2차원 배열 선언하기 숫자를 채울 현재 위치를 0,0 으로 설정 방향에 따라 이동할 수 없을 때까지 반복하면서 숫자 채우기 채워진 숫자를 차례대로 1차원 배열에 옮겨서 반환하기 변수 v에는 채워넣은 숫자 마지막 + 1 숫자가 들어있으므로 v-1이 채워 넣은 숫자의 개수가 된다. …","frontmatter":{"categories":"프로그래머스","title":"삼각 달팽이","date":"June 13, 2023"},"fields":{"slug":"/codingtest/codingtest-snail/"}}},{"node":{"id":"551d4818-0017-5790-ac64-36c9ff204ef8","excerpt":"클래스, 변수, 메소드의 선언부에 함께 사용되어 부가적인 의미를 부여한다. 제어자는 접근 제어자와 그 외 제어자로 나눌 수 있는데, 접근 제어자는 선언부에 하나만 쓸 수 있으며, 그 외 제어자는 조합하여 사용이 가능하다. static - 클래스의, 공통적인 static이 사용될 수 있는 곳 : 멤버변수, 메소드, 초기화 블럭 멤버변수에 static이 붙는다면 모든 인스턴스에 공통적으로 사용되는 클래스 변수며, 인스턴스를 생성하지 않고도 사용이 가능하다. 클래스가 메모리에 로드될 때 생성된다. 메소드에 static이 붙는다면? 인스턴스를 생성하지 않고도 사용 가능한 클래스 메소드가 된다. 클래스 메소드 내에서는 인스턴스 멤버들을 사용할 수 없다. final - 마지막의, 변경될 수 없는 final이 사용될 수 있는 곳 : 클래스, 메소드, 멤버변수, 지역변수 클래스에 final이 붙는다면 확장될 수 없다. 즉 다른 클래스의 조상이 될수 없고 상속 구조에서 제일 마지막 클래스이다. 메…","frontmatter":{"categories":"자바 자바의정석","title":"제어자","date":"June 13, 2023"},"fields":{"slug":"/java/java-modifier/"}}},{"node":{"id":"83339b9f-c258-569e-8830-e1af842f5cda","excerpt":"문제 문제풀이 흐름 모든 직선 쌍에 대해서 반복을 진행한다. \r\n1-1. 교점 좌표를 구해서 정수 좌표만 저장하기  1의 결과에 대해 x, y 좌표의 최댓값, 최솟값 구하기 2의 결과로 2차원 배열의 크기를 결정하고 배열에 별 표시 문자열 배열로 반환 풀이 좌표를 나타내는 클래스 작성 final 사용 이유 ? 데이터를 나타내는 클래스이므로 불변성을 갖게 하기 위해서 생성자로 초기화 하도록 함 long으로 표현해야지 오버플로우가 발생하지 않음 모든 직선 쌍에 대해 반복 진행 교점 좌표 구하는 메소드 교점 좌표 구해서 정수만 리스트에 저장하기 저장된 정수 중 최댓값, 최솟값 구하기  : Long 범위 내에서 표현할 수 있는 가장 큰 숫자 값으로 초기화 구한 최솟값, 최댓값을 이용해서 2차원 배열의 크기 결정 좌표를 표현할 수 있는 최소 크기의 2차원 배열을 만들어서 ’.’ 으로 채워준다. 2차원 배열에 좌표 찍기 2차원 배열에서 (0,0)은 실제 좌표의 (0,0)이 아니므로 좌표를 변…","frontmatter":{"categories":"프로그래머스","title":"교점에 별 만들기","date":"June 03, 2023"},"fields":{"slug":"/codingtest/codingtest-making-a-star/"}}},{"node":{"id":"09cb1bed-0ae4-5f1d-9d03-9e2536cccd59","excerpt":"상속 기존의 클래스를 재사용하여 새로운 클래스를 작성하는 것 상속을 받는다는 것은 상위 클래스를 확장(extends)한다는 의미로 해석된다. 하위 클래스는 상위클래스의 생성자, 초기화 블럭을 제외한 모든 멤버를 모두 상속받는다. 상위 클래스가 변경되면 모든 하위 클래스는 자동으로 영향을 받지만, 하위 클래스가 변경되는 것은 상위 클래스에 아무런 영향이 없다. 포함관계 상속 이외에도 클래스를 재사용하는 다른 방법, 한 클래스의 멤버변수로 다른 클래스 타입의 참조 변수를 선언하는 것 단일상속 자바에서는 단일 상속만 허용한다. Object 클래스 Object 클래스는 모든 클래스의 상위 클래스이다. 다른 클래스로부터 상속 받지 않는 모든 클래스들은 자동으로 Object 클래스를 상속받는다. 오버라이딩 상위 클래스로부터 상속받은 메소드의 내용을 변경하는 것, 상속받은 메소드를 그대로 사용하기도 하지만 필요에 따라 변경을 해야하는 경우 상위 클래스의 메소드를 오버라이딩 한다. 오버라이딩의 …","frontmatter":{"categories":"자바 자바의정석","title":"상속","date":"June 03, 2023"},"fields":{"slug":"/java/java-extends/"}}},{"node":{"id":"c0a96f69-96b3-51a1-b40d-97e56b2dac17","excerpt":"인스턴스가 생성될 때 호출되는 인스턴스 초기화 메소드 생성자의 조건 생성자의 이름은 클래스 이름과 같아야 한다. 생성자는 리턴값이 없다 생성자의 정의 생성자도 오버로딩이 가능하므로 하나의 클래스의 여러개의 생성자가 존재할 수 있다.  연산자 new에 의해서 메모리에 Card 클래스의 인스턴스가 생성된다. 생성자 Card()가 호출되어 수행된다. 인스턴스를 생성할 때 반드시 클래스 내에 정의된 생성자 중 하나를 선택하여 지정해주어야 한다. 기본생성자 컴파일할 때 클래스에 생성자가 하나도 정의되어 있지 않은 경우 컴파일러는 자동으로 기본 생성자를 추가하여 컴파일한다. 컴파일러가 자동 추가해주는 기본생성자는 매개변수와 내용이 없다.  매개변수가 있는 생성자 매개변수가 있는 생성자를 사용한다면 인스턴스를 생성하는 동시에 원하는 값으로 초기화 할 수 있다. 생성자에서 다른 생성자 호출하기 조건 생성자의 이름으로 클래스이름 대신 this를 사용한다. 반드시 첫 줄에서만 호출이 가능하다. 기본…","frontmatter":{"categories":"자바 자바의정석","title":"생성자","date":"May 29, 2023"},"fields":{"slug":"/java/java-constructor/"}}},{"node":{"id":"9aa2a387-ea08-53bc-a592-3727e30b3531","excerpt":"클래스 클래스란 객체를 정의해 놓은 것이며, 객체를 생성하는데 사용된다.\r\n클래스를 잘 만들어 놓으면 객체를 생성할 때마다 고민을 할 필요가 없으며, 만들어 놓은 클래스로부터 객체를 생성해서 사용하기만 하면 된다. 우리는 JDK에서 제공하는 클래스들을 이용해서 쉽게 프로그램을 작성할 수 있다. 클래스의 또 다른 정의 데이터와 함수의 결합\r\n함수와 데이터는 관계가 깊기 때문에 자바에서는 변수와 함수를 하나의 클래스에 정의하여 관계가 깊은 변수와 함수를 함께 다룰 수 있게했다. 사용자 정의 타입\r\n사용자 정의 타입은 사용자가 기능 동작을 위한 데이터와 함수를 묶어서 정의하는 것이다. 객체 객체는 클래스의 정의된 내용대로 메모리에 생성된 것이다.\r\n클래스로부터 객체를 만드는 것을 클래스의 인스턴스화라고 하며, 어떤 클래스로부터 만들어진 객체를 그 클래스의 인스턴스라고 한다.\r\n객체는 포괄적인 의미를 가지고 있다면, 인스턴스는 객체보다 구체적인 의미인 어떤 클래스로부터 만들어진 것인지를 …","frontmatter":{"categories":"자바 자바의정석","title":"클래스, 메소드, 변수, 인스턴스, 객체","date":"May 27, 2023"},"fields":{"slug":"/java/java-class-instance/"}}},{"node":{"id":"cc3d75ca-df12-5da6-9dfe-1875ebae39fc","excerpt":"메소드 내부에서 메소드 자신을 다시 호출하는 것 어떻게 메소드가 자기 자신을 호출할 수 있는걸까? 메소드 입장에서는 자기 자신을 호출하는 것과 다른 메소드를 호출하는 것은 차이가 없다. ‘메소드 호출’ 이라는 것이 특정 위치에 저장되어 있는 명령들을 수행하는 것일 뿐이기 때문 호출된 메소드는 원래의 값이 아닌 복사된 값으로 작업하기 때문에 호출한 메소드와 관계없이 독립적인 작업 수행이 가능하다 :  재귀호출과 반복문 재귀호출은 반복문과 유사한 점이 많으며, 대부분의 재귀호출은 반복문으로 작성하는것이 가능하다.\r\n어떤 작업을 반복적으로 처리해야한다면, 먼저 반복문으로 작성해보고 너무 복잡하다면 재귀호출로 간단하게 할 수 없는지 고민해봐야한다.\r\n반복문보다 재귀호출이 비효율적이므로 재귀호출에 드는 비용보다 재귀호출의 간결함이 주는 이득이 충분히 큰 경우에만 사용해야한다. 대표적인 재귀호출 : 팩토리얼 팩토리얼은 한 숫자가 1이 될 때까지 1씩 감소시켜가면서 계속해서 곱해 나가는 것  …","frontmatter":{"categories":"자바 자바의정석","title":"재귀호출","date":"May 27, 2023"},"fields":{"slug":"/java/java-recursive-call/"}}},{"node":{"id":"804e5ba2-4c3d-5151-96b2-6b597ccd1c89","excerpt":"매개변수의 타입이 기본형일 때는 값이 복사되어서 변수의 값을 읽는 것만 가능하다.\r\n참조형일 때는 인스턴스의 주소가 복사되어서 변수의 값을 읽고 변경할 수 있다. 기본형 매개변수 호출한 메소드에 기본형 매개변수가 선언되어 있는 경우 인자(d.x)의 값을 복사하여 넘겨준 것 호출한 메소드에서 값을 1000으로 변경하더라도 호출한 메소드의 매개변수 값만 변경 될 뿐, 인자로 넘겨준 변수는 영향을 받지 않는다.\r\n 참조형 매개변수 호출된 메소드에 참조형 매개변수가 선언되어 있는 경우 값이 저장된 주소를 호출된 메소드에 넘겨준다. 호출된 메소드의 매개변수가 넘겨받은 인자와 같은 주소값을 가리키고 있기 때문에 호출된 메소드에서 값을 변경하게되면 그 주소값을 가지고 있는 변수의 값이 변경된다.\r\n 참조형 반환타입 copy메소드에서 생성한 객체를 main메소드에서 사용하려면 copy메소드 내에서 생성한 객체의 주소를 반환해주어야 한다. 그렇지 않으면 copy메소드가 종료되면서 생성한 객체의 참…","frontmatter":{"categories":"자바 자바의정석","title":"기본형 매개변수와 참조형 매개변수 / 참조형 반환타입","date":"May 24, 2023"},"fields":{"slug":"/java/java-basic-reference-parameter/"}}}]},"site":{"siteMetadata":{"language":"ko","author":{"name":"김환희","bio":{"role":"개발자","description":["소통을 즐기는"],"thumbnail":"hwana.jpg"},"social":{"github":"https://github.com/hwana","linkedIn":"","email":"hwnh94@gmail.com"}}}}},"pageContext":{}},"staticQueryHashes":["1073350324","1956554647","2938748437","3350743975"]}