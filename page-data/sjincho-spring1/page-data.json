{"componentChunkName":"component---src-templates-blog-template-js","path":"/sjincho-spring1/","result":{"data":{"cur":{"id":"cb1016e7-5a57-5fa0-9a29-7e1501ff4a2c","html":"<p>어제 첫 라이브 세션을 시작으로 스진초 과정이 시작되었다!\r\n프로그래밍은 외우는 것이 아니라 생각하고 이해하면서 해야한다고 말씀해주셨는데, 첫 과제부터 스진초의 정체성이 잘 나타나는거 같다.</p>\n<h2 id=\"내가-생각하는-캡슐화-추상화-다형성-상속성\" style=\"position:relative;\"><a href=\"#%EB%82%B4%EA%B0%80-%EC%83%9D%EA%B0%81%ED%95%98%EB%8A%94-%EC%BA%A1%EC%8A%90%ED%99%94-%EC%B6%94%EC%83%81%ED%99%94-%EB%8B%A4%ED%98%95%EC%84%B1-%EC%83%81%EC%86%8D%EC%84%B1\" aria-label=\"내가 생각하는 캡슐화 추상화 다형성 상속성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>내가 생각하는 캡슐화, 추상화, 다형성, 상속성</h2>\n<p>최근에 자바의 정석을 읽으면서 내용정리를 했기때문에 과제를 보고 ‘ㅎ..할만하군..’ 이라고 생각했다. 하지만 지금 이 글을 적는 이 순간 머리속에 있는 꺼내려고 하니까 쉽지않다. 그래도 최대한 적어봐야지..!</p>\n<h3 id=\"캡슐화\" style=\"position:relative;\"><a href=\"#%EC%BA%A1%EC%8A%90%ED%99%94\" aria-label=\"캡슐화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>캡슐화</h3>\n<ul>\n<li>데이터의 무분별한 변경을 방지하기 위해서 접근제어자를 private으로 선언하여 외부의 접근을 막는 방식</li>\n</ul>\n<h3 id=\"추상화\" style=\"position:relative;\"><a href=\"#%EC%B6%94%EC%83%81%ED%99%94\" aria-label=\"추상화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>추상화</h3>\n<ul>\n<li>추상 클래스를 상속받은 하위 클래스에게 메소드의 작성을 위임하는 방식</li>\n</ul>\n<h3 id=\"다형성\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%ED%98%95%EC%84%B1\" aria-label=\"다형성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다형성</h3>\n<ul>\n<li>상위 클래스의 타입으로 하위 클래스의 인스턴스를 참조할 수 있도록 하는 방식</li>\n</ul>\n<h3 id=\"상속\" style=\"position:relative;\"><a href=\"#%EC%83%81%EC%86%8D\" aria-label=\"상속 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>상속</h3>\n<ul>\n<li>공통된 속성을 모아놓은 클래스(상위 클래스)를 확장하여 새로운 클래스(하위 클래스)를 정의하는 방식</li>\n</ul>\n<h2 id=\"구글링으로-알아낸-캡슐화-추상화-다형성-상속성\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%EA%B8%80%EB%A7%81%EC%9C%BC%EB%A1%9C-%EC%95%8C%EC%95%84%EB%82%B8-%EC%BA%A1%EC%8A%90%ED%99%94-%EC%B6%94%EC%83%81%ED%99%94-%EB%8B%A4%ED%98%95%EC%84%B1-%EC%83%81%EC%86%8D%EC%84%B1\" aria-label=\"구글링으로 알아낸 캡슐화 추상화 다형성 상속성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구글링으로 알아낸 캡슐화, 추상화, 다형성, 상속성</h2>\n<h3 id=\"캡슐화-1\" style=\"position:relative;\"><a href=\"#%EC%BA%A1%EC%8A%90%ED%99%94-1\" aria-label=\"캡슐화 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>캡슐화</h3>\n<ul>\n<li>변수와 메소드를 하나의 단위로 묶는 것, 클래스를 통해서 캡슐화가 이루어진다.</li>\n<li>클래스의 인스턴스를 생성하여 변수에 접근할 수 있다.</li>\n</ul>\n<h4 id=\"정보은닉\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%B3%B4%EC%9D%80%EB%8B%89\" aria-label=\"정보은닉 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정보은닉</h4>\n<ul>\n<li>캡슐화에 정보은닉이 동반되도록 프로그램을 구현하는 경우가 많아서 두 개념이 자주 혼동된다.</li>\n<li>클래스 외부에서 특정 메소드에만 접근이 가능하게 하여 내부가 어떤식으로 처리되는지 모르게 하고 데이터의 무분별한 변경을 방지한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">{</span>\r\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span> <span class=\"token comment\">//private으로 선언해 외부에서 접근이 안되도록한다.</span>\r\n\r\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 데이터 변경은 setter를 통해서 진행한다.</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"추상화-1\" style=\"position:relative;\"><a href=\"#%EC%B6%94%EC%83%81%ED%99%94-1\" aria-label=\"추상화 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>추상화</h3>\n<ul>\n<li>객체의 공통적인 속성과 기능을 추출하여 정의하는것</li>\n</ul>\n<h3 id=\"다형성-1\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%ED%98%95%EC%84%B1-1\" aria-label=\"다형성 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다형성</h3>\n<ul>\n<li>하나의 객체가 여러가지 타입을 가질 수 있는 것을 의미</li>\n<li>참조변수의 타입이 참조변수가 참조하고 있는 인스턴스에서 사용할 수 있는 멤버의 갯수를 결정한다.</li>\n</ul>\n<h3 id=\"상속-1\" style=\"position:relative;\"><a href=\"#%EC%83%81%EC%86%8D-1\" aria-label=\"상속 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>상속</h3>\n<ul>\n<li>기존 클래스에 기능을 추가하거나 재정의 하는것을 의미</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">//추상화 된 추상클래스</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span> <span class=\"token comment\">//공통적인 속성</span>\r\n    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span> <span class=\"token comment\">//공통적인 속성</span>\r\n\r\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"이동한다\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">//공통적인 기능</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"먹는다\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">//공통적인 기능</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//짖는 소리는 동물마다 다르므로 추상메서드로 생성</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">//추상 클래스를 상속 받음</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">{</span>\r\n\t<span class=\"token class-name\">String</span> feed<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 해당 클래스만의 속성</span>\r\n\r\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> feed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//상위클래스의 생성자 호출</span>\r\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>feed <span class=\"token operator\">=</span> feed<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getFeed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> feed<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setFeed</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> feed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>feed <span class=\"token operator\">=</span> feed<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n\t<span class=\"token comment\">//메서드 오버라이딩</span>\r\n\t<span class=\"token comment\">//추상 클래스를 상속받으면 추상 메소드를 구현해주어야한다.</span>\r\n    <span class=\"token annotation punctuation\">@Override</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"멍!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> example <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">Animal</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"초코\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"강아지 전용 맛있는 사료\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//다형성</span>\r\n\t\t<span class=\"token comment\">//인스턴스의 참조타입이 상위클래스이므로</span>\r\n        a<span class=\"token punctuation\">.</span><span class=\"token function\">bark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//상위클래스에 있는 메소드를 사용할 수 있다.</span>\r\n        <span class=\"token comment\">//a.setFeed(); 하위클래스에 있는 메소드를 사용하면 에러가 발생한다.</span>\r\n\r\n\t\t<span class=\"token class-name\">Dog</span> d <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"재롱이\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"맛없는 사료\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        d<span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Animal을 상속받았기 때문에 해당 메소드 사용 가능</span>\r\n\r\n\t\t<span class=\"token comment\">//인스턴스의 타입이 Dog이기 때문에 Dog클래스에 정의된 메소드 사용 가능</span>\r\n        d<span class=\"token punctuation\">.</span><span class=\"token function\">setFeed</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"몸에 좋은 사료\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>내용을 작성하고 보니 내 머릿속에는 추상화와 상속에대한 개념이 섞여져 있는것으로 보인다. 다시한번 정리해보자! 추상화는 객체의 공통적인 기능을 추출하여 정의하는 것이고 자바에서는 추상클래스와 인터페이스로 표현하고 있다. 상속은 기존 클래스에 기능을 추가하거나 재정의 하는 것을 의미한다. 두 특징 모두 코드의 중복을 줄이고 유지보수에 좋다. 그리고 아직 다형성에 대한 장점이 크게 와닿지 않는다. 개념을 잘 이해하고 있으면 언젠가 아! 하는날이 오지 않을까?</p>\n</blockquote>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EB%82%B4%EA%B0%80-%EC%83%9D%EA%B0%81%ED%95%98%EB%8A%94-%EC%BA%A1%EC%8A%90%ED%99%94-%EC%B6%94%EC%83%81%ED%99%94-%EB%8B%A4%ED%98%95%EC%84%B1-%EC%83%81%EC%86%8D%EC%84%B1\">내가 생각하는 캡슐화, 추상화, 다형성, 상속성</a></p>\n<ul>\n<li><a href=\"#%EC%BA%A1%EC%8A%90%ED%99%94\">캡슐화</a></li>\n<li><a href=\"#%EC%B6%94%EC%83%81%ED%99%94\">추상화</a></li>\n<li><a href=\"#%EB%8B%A4%ED%98%95%EC%84%B1\">다형성</a></li>\n<li><a href=\"#%EC%83%81%EC%86%8D\">상속</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EA%B5%AC%EA%B8%80%EB%A7%81%EC%9C%BC%EB%A1%9C-%EC%95%8C%EC%95%84%EB%82%B8-%EC%BA%A1%EC%8A%90%ED%99%94-%EC%B6%94%EC%83%81%ED%99%94-%EB%8B%A4%ED%98%95%EC%84%B1-%EC%83%81%EC%86%8D%EC%84%B1\">구글링으로 알아낸 캡슐화, 추상화, 다형성, 상속성</a></p>\n<ul>\n<li>\n<p><a href=\"#%EC%BA%A1%EC%8A%90%ED%99%94-1\">캡슐화</a></p>\n<ul>\n<li><a href=\"#%EC%A0%95%EB%B3%B4%EC%9D%80%EB%8B%89\">정보은닉</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%B6%94%EC%83%81%ED%99%94-1\">추상화</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%8B%A4%ED%98%95%EC%84%B1-1\">다형성</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%83%81%EC%86%8D-1\">상속</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"어제 첫 라이브 세션을 시작으로 스진초 과정이 시작되었다!\r\n프로그래밍은 외우는 것이 아니라 생각하고 이해하면서 해야한다고 말씀해주셨는데, 첫 과제부터 스진초의 정체성이 잘 나타나는거 같다. 내가 생각하는 캡슐화, 추상화, 다형성, 상속성 최근에 자바의 정석을 읽으면서 내용정리를 했기때문에 과제를 보고 ‘ㅎ..할만하군..’ 이라고 생각했다. 하지만 지금 이 글을 적는 이 순간 머리속에 있는 꺼내려고 하니까 쉽지않다. 그래도 최대한 적어봐야지..! 캡슐화 데이터의 무분별한 변경을 방지하기 위해서 접근제어자를 private으로 선언하여 외부의 접근을 막는 방식 추상화 추상 클래스를 상속받은 하위 클래스에게 메소드의 작성을 위임하는 방식 다형성 상위 클래스의 타입으로 하위 클래스의 인스턴스를 참조할 수 있도록 하는 방식 상속 공통된 속성을 모아놓은 클래스(상위 클래스)를 확장하여 새로운 클래스(하위 클래스)를 정의하는 방식 구글링으로 알아낸 캡슐화, 추상화, 다형성, 상속성 캡슐화 변수…","frontmatter":{"date":"July 24, 2023","title":"과제1) 나만의 언어로 객체 지향의 특징 설명하기","categories":"스진초 자바","author":"화나","emoji":"🐢"},"fields":{"slug":"/sjincho-spring1/"}},"next":{"id":"d92b26ad-9285-5f0f-8836-ecad5698a757","html":"<p><a href=\"https://school.programmers.co.kr/learn/courses/30/lessons/12911\">문제</a></p>\n<h3 id=\"내-최종코드\" style=\"position:relative;\"><a href=\"#%EB%82%B4-%EC%B5%9C%EC%A2%85%EC%BD%94%EB%93%9C\" aria-label=\"내 최종코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>내 최종코드</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\r\n        <span class=\"token keyword\">int</span> answer <span class=\"token operator\">=</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">int</span> nowCount <span class=\"token operator\">=</span> <span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n            <span class=\"token keyword\">int</span> plusCount <span class=\"token operator\">=</span> <span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span>answer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nowCount <span class=\"token operator\">==</span> plusCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\r\n                answer<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span>\r\n        <span class=\"token punctuation\">}</span>\r\n\r\n        <span class=\"token keyword\">return</span> answer<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token keyword\">int</span> <span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">String</span> binary <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBinaryString</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> binary<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n\r\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span> <span class=\"token operator\">==</span> c<span class=\"token punctuation\">)</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n\r\n        <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>주어진 숫자 n을 이진수로 바꿔서 String형 배열에 넣었는데 시간초과 오류가 떴다.</li>\n<li>이전 문제처럼 char형 배열로 변경해주었더니 통과되었다.</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EB%82%B4-%EC%B5%9C%EC%A2%85%EC%BD%94%EB%93%9C\">내 최종코드</a></li>\n</ul>\n</div>","frontmatter":{"date":"July 17, 2023","title":"다음 큰 숫자","categories":"프로그래머스","author":"화나","emoji":"💻"},"fields":{"slug":"/codingtest-next-big-number/"}},"prev":{"id":"1da4bd45-10d1-5df1-885e-baf1622a8300","html":"<p>오늘도 역시나 내 머리속에 있고 나 혼자서는 응~그치그치~ 하면서 이해할 수 있는 내용이지만, 남에게 설명하려면 입이 안 떨어지고 어버버하게되는 그런 과제였다. 그 과제가 뭐냐구요..?</p>\n<blockquote>\n<ol>\n<li>인터페이스가 가지고 있는 객체 지향의 특징에는 어떤 것이 있는지</li>\n<li>그렇게 생각하는 이유는 무엇인지</li>\n</ol>\n</blockquote>\n<p>자! 오늘도 머리에 있는걸 열심히 끄집어 내보자🤯\r\n<br></p>\n<h3 id=\"내-머릿속에-있는-생각\" style=\"position:relative;\"><a href=\"#%EB%82%B4-%EB%A8%B8%EB%A6%BF%EC%86%8D%EC%97%90-%EC%9E%88%EB%8A%94-%EC%83%9D%EA%B0%81\" aria-label=\"내 머릿속에 있는 생각 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>내 머릿속에 있는 생각</h3>\n<p>객체지향의 특징에는 캡슐화, 추상화, 다형성, 상속이 있다. 인터페이스는 이 속성들 4가지를 모두 가지고 있다고 생각한다.</p>\n<ol>\n<li>캡슐화\n<ul>\n<li>인터페이스는 상수와 추상메소드만을 가질 수 있다.</li>\n<li>추상메소드만을 가질 수 있다는 것은 메소드의 구현을 클래스에게 위임하였다는 뜻으로, 각 기능의 정의와 구현을 분리하여 캡슐화를 한 것이다.</li>\n</ul>\n</li>\n<li>추상화\n<ul>\n<li>인터페이스는 공통된 기능을 추출해서 정의한 것이기 때문에 추상화 되었다.</li>\n</ul>\n</li>\n<li>다형성\n<ul>\n<li>인터페이스를 구현한 클래스라면, 인스턴스의 참조변수 타입을 인터페이스로 할 수있다.</li>\n</ul>\n</li>\n<li>상속\n<ul>\n<li>인터페이스도 인터페이스를 상속받을 수 있다.</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"구글이-알려준-깔끔한-답\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%EA%B8%80%EC%9D%B4-%EC%95%8C%EB%A0%A4%EC%A4%80-%EA%B9%94%EB%81%94%ED%95%9C-%EB%8B%B5\" aria-label=\"구글이 알려준 깔끔한 답 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구글이 알려준 깔끔한 답</h3>\n<ol>\n<li>\n<p>인터페이스의 캡슐화 : 객체는 상태와 행위를 하나로 묶은 후에 외부에서는 반드시 접근해야만 하는 행위만을 골라서 공용 인터페이스를 통해서 노출해야 한다. 그러므로 데이터 캡슐화는 인터페이스와 구현을 분리하기 위한 전제조건이다.</p>\n</li>\n<li>\n<p>인터페이스의 추상화 : 인터페이스는 일종의 추상 클래스로, 추상 클래스와 다른점이 있다면더 높은 추상화 정도를 가지고 있다는 것이다.</p>\n</li>\n<li>\n<p>인터페이스의 상속 : 인터페이스도 인터페이스로부터 상속받을 수 있으며 다중상속이 가능하다.</p>\n</li>\n<li>\n<p>인터페이스의 다형성 : 클래스에서 인터페이스를 구현한다는 것은 인터페이스가 해당 클래스의 상위 클래스 위치에 있다는 뜻이다. 그래서 인터페이스 타입 참조 변수에 하위 클래스의 인스턴스를 생성할 수 있다.</p>\n</li>\n</ol>\n<h4 id=\"번외--확장extends과-구현implement\" style=\"position:relative;\"><a href=\"#%EB%B2%88%EC%99%B8--%ED%99%95%EC%9E%A5extends%EA%B3%BC-%EA%B5%AC%ED%98%84implement\" aria-label=\"번외  확장extends과 구현implement permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>번외 : 확장(extends)과 구현(implement)</h4>\n<p>인터페이스의 상속에 대해서 작성을 하려고 할 때 순간 멈칫했다.\r\n인터페이스 입장에서 인터페이스를 상속 받는 것(확장)을 작성해야 하나, 인터페이스를 구현한 클래스의 입장(구현)에서 작성해야 하나 고민을 했다. 내가 알고 있는 상속의 뜻은 ‘기존의 클래스에 기능을 추가하거나 재정의 하는 것’이기 때문에 인터페이스 입장에서 작성하는 것이 더 적당하다는 결론을 내렸다.</p>\n<p>확장과 구현에 대한 개념이 완벽하게 자리잡은게 아니라서 저런 고민을 한거 같다.\r\n그래서 번외로 정리해보는 <strong>상속과 구현의 정의!</strong><del>(feat.구글)</del></p>\n<ul>\n<li>클래스의 계층을 표현하기 위해 상속이 만들어졌으며, 상속을 하게되면 하위 클래스는 상위 클래스의 멤버들을 모두 사용할 수 있다. 이때, 상위 클래스의 멤버를 <code class=\"language-text\">새롭게 구현 하는가</code> / <code class=\"language-text\">그대로 사용 하는가</code>에 따라서 상속의 형태가 나누어 진다.</li>\n<li>extends : 상속의 대표적인 형태\n<ul>\n<li>상위 클래스에서 멤버를 선언 및 정의한다.</li>\n<li>하위 클래스에서 상위 클래스 멤버를 <strong>그대로 사용</strong>하며, 필요시에는 오버라이딩하여 사용할 수 있다.</li>\n</ul>\n</li>\n<li>implements : 인터페이스 구현\n<ul>\n<li>상위 클래스는 선언만 하여 가이드를 제공하며, 하위 클래스는 상위 클래스의 멤버를 오버라이딩하여 정의한다.</li>\n<li>하위 클래스에서 메소드의 <strong>구현</strong>이 강제된다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EB%82%B4-%EB%A8%B8%EB%A6%BF%EC%86%8D%EC%97%90-%EC%9E%88%EB%8A%94-%EC%83%9D%EA%B0%81\">내 머릿속에 있는 생각</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B5%AC%EA%B8%80%EC%9D%B4-%EC%95%8C%EB%A0%A4%EC%A4%80-%EA%B9%94%EB%81%94%ED%95%9C-%EB%8B%B5\">구글이 알려준 깔끔한 답</a></p>\n<ul>\n<li><a href=\"#%EB%B2%88%EC%99%B8--%ED%99%95%EC%9E%A5extends%EA%B3%BC-%EA%B5%AC%ED%98%84implement\">번외 : 확장(extends)과 구현(implement)</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"July 25, 2023","title":"과제2) 인터페이스요..?","categories":"스진초 자바","author":"화나","emoji":"🐢"},"fields":{"slug":"/sjincho-spring2/"}},"site":{"siteMetadata":{"siteUrl":"https://www.hwana.com","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/sjincho-spring1/","nextSlug":"/codingtest-next-big-number/","prevSlug":"/sjincho-spring2/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}