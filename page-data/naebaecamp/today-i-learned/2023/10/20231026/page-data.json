{"componentChunkName":"component---src-templates-blog-template-js","path":"/naebaecamp/today-i-learned/2023/10/20231026/","result":{"data":{"cur":{"id":"caab53a9-c8d0-55fd-ab00-3d6172ca1427","html":"<h3 id=\"-오늘의-내용정리\" style=\"position:relative;\"><a href=\"#-%EC%98%A4%EB%8A%98%EC%9D%98-%EB%82%B4%EC%9A%A9%EC%A0%95%EB%A6%AC\" aria-label=\" 오늘의 내용정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📝 오늘의 내용정리</h3>\n<p><a href=\"https://hwana.github.io/java/java-interface-noname-instance/\">인터페이스는 객체 생성이 불가능할까?</a></p>\n<h3 id=\"-오늘의-마무리\" style=\"position:relative;\"><a href=\"#-%EC%98%A4%EB%8A%98%EC%9D%98-%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\" 오늘의 마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔚 오늘의 마무리</h3>\n<p>자바8에 추가된 기능에 대해서 알고싶어서 모던 자바 인 액션을 읽기 시작했다. 책을 너무 여러권 읽는 것 같지만.. 병렬독서가 적성에 맞는 나는 어쩔수없다. 그리고 지금 당장 람다와 스트림에 얼른 익숙해지고 싶기 때문에 다른 책을 펼쳐버렸다. 모던 자바 인 액션은 예전에 읽으려고 시도했다가 포기한 책이다. 번역 어투가 적응이 잘 되지 않았고 어려웠다.</p>\n<p>오늘도 많은 부분을 읽지는 못했다. 하지만 이대로 또 포기할 수는 없기때문에 천천히 한글자 한글자 읽어내려갔다. 중간에 이해가 안가는 부분은 구글에 검색하며, 코드를 직접 쳐가며 머리에 넣으려고 노력했다. 코드를 치면서 읽다보니 평소에는 지나쳤을 지식도 새롭게 알게되었다. 얼른 익숙해져서 스트림 잘 쓰고 싶다!</p>","excerpt":"📝 오늘의 내용정리 인터페이스는 객체 생성이 불가능할까? 🔚 오늘의 마무리 자바8에 추가된 기능에 대해서 알고싶어서 모던 자바 인 액션을 읽기 시작했다. 책을 너무 여러권 읽는 것 같지만.. 병렬독서가 적성에 맞는 나는 어쩔수없다. 그리고 지금 당장 람다와 스트림에 얼른 익숙해지고 싶기 때문에 다른 책을 펼쳐버렸다. 모던 자바 인 액션은 예전에 읽으려고 시도했다가 포기한 책이다. 번역 어투가 적응이 잘 되지 않았고 어려웠다. 오늘도 많은 부분을 읽지는 못했다. 하지만 이대로 또 포기할 수는 없기때문에 천천히 한글자 한글자 읽어내려갔다. 중간에 이해가 안가는 부분은 구글에 검색하며, 코드를 직접 쳐가며 머리에 넣으려고 노력했다. 코드를 치면서 읽다보니 평소에는 지나쳤을 지식도 새롭게 알게되었다. 얼른 익숙해져서 스트림 잘 쓰고 싶다!","frontmatter":{"date":"October 26, 2023","title":"TIL) 20231026","categories":"TIL","author":"화나","emoji":"✨"},"fields":{"slug":"/naebaecamp/today-i-learned/2023/10/20231026/"}},"next":{"id":"b57ce60c-cbd6-5510-b279-0c32c5c7515e","html":"<p>팀 과제에 추가된 요구사항을 구현했다. 간단한 부분을 맡게되어서 빨리 끝났다.</p>\n<h3 id=\"1-요청사항-입력-기능-추가\" style=\"position:relative;\"><a href=\"#1-%EC%9A%94%EC%B2%AD%EC%82%AC%ED%95%AD-%EC%9E%85%EB%A0%A5-%EA%B8%B0%EB%8A%A5-%EC%B6%94%EA%B0%80\" aria-label=\"1 요청사항 입력 기능 추가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 요청사항 입력 기능 추가</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>addProduct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t<span class=\"token class-name\">String</span> writeRequest <span class=\"token operator\">=</span> <span class=\"token function\">printQuestion</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"writeRequest\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t\r\n\t<span class=\"token comment\">//요청 사항 입력 여부 확인</span>\r\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>writeRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t    <span class=\"token comment\">//요청사항이 조건에 맞을 때까지</span>\r\n\t    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"요청 사항을 20자 이하로 입력해 주세요.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t        <span class=\"token class-name\">Scanner</span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t        <span class=\"token class-name\">String</span> request <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t\r\n\t        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">checkRequestLength</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t            order<span class=\"token punctuation\">.</span><span class=\"token function\">setRequest</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\r\n\t        <span class=\"token punctuation\">}</span>\r\n\t    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">/**\r\n * 요청사항 길이 확인\r\n *\r\n * @param request : 입력 받은 요청 사항\r\n * @return : true : 조건 충족, false : 조건 불충족\r\n */</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">checkRequestLength</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>요청사항은 필수가 아니기 때문에 입력한다고 선택할 경우에만 입력받도록 했다.</li>\n<li>20자이하의 조건이 만족할 때까지 재요청을 한다.</li>\n<li>조건을 만족한다면 order 인스턴스가 가지고 있는 request 필드에 저장한다.</li>\n</ul>\n<h3 id=\"2-주문-확인-시-요청사항-출력\" style=\"position:relative;\"><a href=\"#2-%EC%A3%BC%EB%AC%B8-%ED%99%95%EC%9D%B8-%EC%8B%9C-%EC%9A%94%EC%B2%AD%EC%82%AC%ED%95%AD-%EC%B6%9C%EB%A0%A5\" aria-label=\"2 주문 확인 시 요청사항 출력 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 주문 확인 시 요청사항 출력</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[ 주문 요청사항 ]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">.</span><span class=\"token function\">getRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>order인스턴스가 가지고 있는 request를 가지고 온다.</li>\n</ul>\n<h3 id=\"3-주문-상태-및-주문-상태-변경-기능-추가\" style=\"position:relative;\"><a href=\"#3-%EC%A3%BC%EB%AC%B8-%EC%83%81%ED%83%9C-%EB%B0%8F-%EC%A3%BC%EB%AC%B8-%EC%83%81%ED%83%9C-%EB%B3%80%EA%B2%BD-%EA%B8%B0%EB%8A%A5-%EC%B6%94%EA%B0%80\" aria-label=\"3 주문 상태 및 주문 상태 변경 기능 추가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 주문 상태 및 주문 상태 변경 기능 추가</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">/**\r\n * 주문 완료 처리\r\n * @param status : 현재 주문 처리 상태\r\n */</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">switchStatus</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> status<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>status<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>Order 클래스에 status 필드를 추가하고 false로 초기화했다.</li>\n<li>주문 상태를 받아 변경해주는 switchStatus 메소드를 구현했다.</li>\n</ul>","frontmatter":{"date":"October 25, 2023","title":"내일배움캠프) JAVA 개인 프로젝트 과제 구현 4차","categories":"내일배움캠프","author":"화나","emoji":"✨"},"fields":{"slug":"/naebaecamp/project/java-solo-project4/"}},"prev":{"id":"2990b3c3-2c07-518c-9ff1-a99b8d43443c","html":"<p>모던 자바 인 액션을 읽던 도중 아래와 같은 코드를 보게 되었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">File</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> hiddenFiles <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">listFiles</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token annotation punctuation\">@Override</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">File</span> file<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">isHidden</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>디렉토리에 숨겨진 파일을 필터링하는 코드이다. 한 눈에 들어오지 않아서 인텔리제이를 켜고 하나하나 입력해봤다. new FileFilter 부분을 타이핑하자 자동완성이 되었다. 완성된 코드는 평소에 객체 생성할 때 보던 코드와 다른 모습이였다. FileFilter가 무엇인지 알아내기 위해서 내부로 들어가보았다. 인터페이스였다. 내가 아는 인터페이스는 new 키워드로 객체 생성이 불가능한데..? 뭐지?</p>\n<h3 id=\"인터페이스도-익명-객체로-객체-생성이-가능하다\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%8F%84-%EC%9D%B5%EB%AA%85-%EA%B0%9D%EC%B2%B4%EB%A1%9C-%EA%B0%9D%EC%B2%B4-%EC%83%9D%EC%84%B1%EC%9D%B4-%EA%B0%80%EB%8A%A5%ED%95%98%EB%8B%A4\" aria-label=\"인터페이스도 익명 객체로 객체 생성이 가능하다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인터페이스도 익명 객체로 객체 생성이 가능하다.</h3>\n<p>익명 객체란 말 그대로 이름이 없는 객체이다. 이름이 없기 때문에 부를 수도 없다. 그렇기 때문에 생성과 동시에 한번만 사용되고 사라진다. 일반적으로 생성한 후에 다른 메소드의 파라미터로 넘겨줄 때 사용한다.</p>\n<p><strong>인터페이스도 익명 객체를 생성함과 동시에 추상메소드를 구현한다면 (익명)객체로 만들 수 있다.</strong></p>\n<blockquote>\n<p>자바8에서 추가된 기능으로 더 이상 위와 같이 구현하지 않고, 메소드를 일급객체 취급하여 메소드 참조를 통해 메소드를 전달할 수 있게 된다.</p>\n</blockquote>","frontmatter":{"date":"October 26, 2023","title":"인터페이스는 객체 생성이 불가능할까?","categories":"자바","author":"화나","emoji":"📚"},"fields":{"slug":"/java/java-interface-noname-instance/"}},"site":{"siteMetadata":{"siteUrl":"https://www.hwana.com","comments":{"utterances":{"repo":"hwana/hwana.github.io"}}}}},"pageContext":{"slug":"/naebaecamp/today-i-learned/2023/10/20231026/","nextSlug":"/naebaecamp/project/java-solo-project4/","prevSlug":"/java/java-interface-noname-instance/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}