{"componentChunkName":"component---src-templates-blog-template-js","path":"/naebaecamp/today-i-learned/2023/11/20231101/","result":{"data":{"cur":{"id":"5c0c8aa9-57bc-53d5-9d44-98aeedb23a13","html":"<h2 id=\"-오늘의-내용정리\" style=\"position:relative;\"><a href=\"#-%EC%98%A4%EB%8A%98%EC%9D%98-%EB%82%B4%EC%9A%A9%EC%A0%95%EB%A6%AC\" aria-label=\" 오늘의 내용정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📝 오늘의 내용정리</h2>\n<p><a href=\"https://github.com/StudySpringAlgorithm/Study_Algorithm_TeamSpring/blob/main/Kim/day4/day4.md\">알고리즘 스터디 4일차</a></p>\n<h3 id=\"mathsqrt\" style=\"position:relative;\"><a href=\"#mathsqrt\" aria-label=\"mathsqrt permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Math.sqrt()</h3>\n<p>제곱근을 구하는 함수</p>\n<p>ex) sqrt(9) = 3</p>\n<h3 id=\"mathpow\" style=\"position:relative;\"><a href=\"#mathpow\" aria-label=\"mathpow permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Math.pow()</h3>\n<p>거듭제곱을 계산하는 함수</p>\n<p>ex) pow(2, 3) = 8</p>\n<h3 id=\"beanfactory\" style=\"position:relative;\"><a href=\"#beanfactory\" aria-label=\"beanfactory permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>BeanFactory</h3>\n<ul>\n<li>스프링 컨테이너의 최상위 인터페이스이며 스프링 빈을 관리하고 조회하는 역할을 담당한다.</li>\n</ul>\n<h3 id=\"applicationcontext\" style=\"position:relative;\"><a href=\"#applicationcontext\" aria-label=\"applicationcontext permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ApplicationContext</h3>\n<ul>\n<li>BeanFactory의 모든 기능을 상속 받아서 제공하며 부가기능이 더해진 컨테이너</li>\n</ul>\n<h3 id=\"다양한-의존관계-주입-방법\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%EC%96%91%ED%95%9C-%EC%9D%98%EC%A1%B4%EA%B4%80%EA%B3%84-%EC%A3%BC%EC%9E%85-%EB%B0%A9%EB%B2%95\" aria-label=\"다양한 의존관계 주입 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다양한 의존관계 주입 방법</h3>\n<ol>\n<li>생성자 주입\n<ul>\n<li>생성자를 통해서 의존 관계를 주입 받는 방식</li>\n<li>생성자 호출 시점에서 딱 한번만 호출되는 것이 보장되어 불변이나 필수 의존관계에 사용한다.</li>\n<li>클래스에 생성자가 한개라면 <code class=\"language-text\">@Autowired</code>를 생략해도 자동 주입이 된다.</li>\n</ul>\n</li>\n<li>수정자 주입(setter 주입)\n<ul>\n<li>수정자 메소드를 통해서 의존관계를 주입하는 방법이며 선택이나 변경 가능성이 있는 의존관계에 사용한다.</li>\n</ul>\n</li>\n<li>필드 주입\n<ul>\n<li>필드에 바로 주입하는 방법으로 외부에서 변경이 불가능하기 때문에 테스트하기 힘들다는 치명적인 단점이 있다.</li>\n<li>사용하지 않는코드지만 애플리케이션의 실제 코드와 관계 없는 테스트 코드에서 종종 사용할 수도 있다.</li>\n</ul>\n</li>\n<li>일반 메소드 주입\n<ul>\n<li>일반 메소드를 통해서 주입 받을수 있으며 한번에 여러 필드를 주입 받을 수 있다.</li>\n<li>잘 사용하지 않는다.</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"많은-자동-의존관계-주입-방법-중-생성자-주입을-권장한다\" style=\"position:relative;\"><a href=\"#%EB%A7%8E%EC%9D%80-%EC%9E%90%EB%8F%99-%EC%9D%98%EC%A1%B4%EA%B4%80%EA%B3%84-%EC%A3%BC%EC%9E%85-%EB%B0%A9%EB%B2%95-%EC%A4%91-%EC%83%9D%EC%84%B1%EC%9E%90-%EC%A3%BC%EC%9E%85%EC%9D%84-%EA%B6%8C%EC%9E%A5%ED%95%9C%EB%8B%A4\" aria-label=\"많은 자동 의존관계 주입 방법 중 생성자 주입을 권장한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>많은 자동 의존관계 주입 방법 중 생성자 주입을 권장한다.</h4>\n<h5 id=\"불변\" style=\"position:relative;\"><a href=\"#%EB%B6%88%EB%B3%80\" aria-label=\"불변 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>불변</h5>\n<p>대부분의 의존관계는 애플리케이션이을 한번 실행하고 나면 종료시점까지 의존관계를 변경할 일이 거의 없으며, 의존관계가 변하면 안된다.\r\n수정자 주입을 사용하게 되면 setxxx메소드를 public으로 열어두어야 하기때문에 누군가 실수로 변경할 수도 있다.</p>\n<h5 id=\"누락\" style=\"position:relative;\"><a href=\"#%EB%88%84%EB%9D%BD\" aria-label=\"누락 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>누락</h5>\n<p>생성자 주입을 사용하게 되면 의존관계 주입을 누락했을때 컴파일 오류가 발생하기 때문에 누락을 쉽게 알아챌 수 있다.</p>\n<h5 id=\"final\" style=\"position:relative;\"><a href=\"#final\" aria-label=\"final permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>final</h5>\n<p>생성자 주입을 사용하게 되면 final 키워드를 사용할 수 있어서 생성자에 값이 설정되지 않는다면 컴파일 단계에서 막아준다.</p>\n<blockquote>\n<p>참고<br></p>\n</blockquote>\n<p>생성자 주입을 제외한 나머지 주입방식은 모두 생성자 이후에 호출되므로 final 키워드를 사용할 수 없다.\r\n생성자 주입과 수정자 주입을 동시에 사용해야 할 경우에는 기본으로 생성자 주입을 사용하고, 필수 값이 아닌 경우에 수정자 주입방식을 옵션으로 부여하면 된다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EC%98%A4%EB%8A%98%EC%9D%98-%EB%82%B4%EC%9A%A9%EC%A0%95%EB%A6%AC\">📝 오늘의 내용정리</a></p>\n<ul>\n<li>\n<p><a href=\"#mathsqrt\">Math.sqrt()</a></p>\n</li>\n<li>\n<p><a href=\"#mathpow\">Math.pow()</a></p>\n</li>\n<li>\n<p><a href=\"#beanfactory\">BeanFactory</a></p>\n</li>\n<li>\n<p><a href=\"#applicationcontext\">ApplicationContext</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%8B%A4%EC%96%91%ED%95%9C-%EC%9D%98%EC%A1%B4%EA%B4%80%EA%B3%84-%EC%A3%BC%EC%9E%85-%EB%B0%A9%EB%B2%95\">다양한 의존관계 주입 방법</a></p>\n<ul>\n<li>\n<p><a href=\"#%EB%A7%8E%EC%9D%80-%EC%9E%90%EB%8F%99-%EC%9D%98%EC%A1%B4%EA%B4%80%EA%B3%84-%EC%A3%BC%EC%9E%85-%EB%B0%A9%EB%B2%95-%EC%A4%91-%EC%83%9D%EC%84%B1%EC%9E%90-%EC%A3%BC%EC%9E%85%EC%9D%84-%EA%B6%8C%EC%9E%A5%ED%95%9C%EB%8B%A4\">많은 자동 의존관계 주입 방법 중 생성자 주입을 권장한다.</a></p>\n<ul>\n<li><a href=\"#%EB%B6%88%EB%B3%80\">불변</a></li>\n<li><a href=\"#%EB%88%84%EB%9D%BD\">누락</a></li>\n<li><a href=\"#final\">final</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"📝 오늘의 내용정리 알고리즘 스터디 4일차 Math.sqrt() 제곱근을 구하는 함수 ex) sqrt(9) = 3 Math.pow() 거듭제곱을 계산하는 함수 ex) pow(2, 3) = 8 BeanFactory 스프링 컨테이너의 최상위 인터페이스이며 스프링 빈을 관리하고 조회하는 역할을 담당한다. ApplicationContext BeanFactory의 모든 기능을 상속 받아서 제공하며 부가기능이 더해진 컨테이너 다양한 의존관계 주입 방법 생성자 주입 생성자를 통해서 의존 관계를 주입 받는 방식 생성자 호출 시점에서 딱 한번만 호출되는 것이 보장되어 불변이나 필수 의존관계에 사용한다. 클래스에 생성자가 한개라면 를 생략해도 자동 주입이 된다. 수정자 주입(setter 주입) 수정자 메소드를 통해서 의존관계를 주입하는 방법이며 선택이나 변경 가능성이 있는 의존관계에 사용한다. 필드 주입 필드에 바로 주입하는 방법으로 외부에서 변경이 불가능하기 때문에 테스트하기 힘들다는 치명적인 단…","frontmatter":{"date":"November 01, 2023","title":"TIL) 다양한 의존관계 주입 방법","categories":"TIL","author":"화나","emoji":"✨"},"fields":{"slug":"/naebaecamp/today-i-learned/2023/11/20231101/"}},"next":{"id":"59fc0b2f-915e-5f97-8e04-c1908975c02f","html":"<h2 id=\"-오늘의-내용정리\" style=\"position:relative;\"><a href=\"#-%EC%98%A4%EB%8A%98%EC%9D%98-%EB%82%B4%EC%9A%A9%EC%A0%95%EB%A6%AC\" aria-label=\" 오늘의 내용정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📝 오늘의 내용정리</h2>\n<p><a href=\"https://github.com/StudySpringAlgorithm/Study_Algorithm_TeamSpring/blob/main/Kim/day3/day3.md\">알고리즘 스터디 3일차</a></p>\n<p>코딩테스트 문제를 풀다가 parseInt()와 valueOf() 차이가 궁금해졌다. 겉으로 보기엔 같은 값을 반환하는데 왜 굳이 두 메소드가 따로 존재하는걸까?</p>\n<h3 id=\"parseint와-valueof의-차이\" style=\"position:relative;\"><a href=\"#parseint%EC%99%80-valueof%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-label=\"parseint와 valueof의 차이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>parseInt()와 valueOf()의 차이</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"1234\"</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//1234</span>\r\n<span class=\"token class-name\">Integer</span> b <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//1234</span></code></pre></div>\n<p>두 메소드 모두 <strong>문자열을 정수로 변환</strong>하고 숫자로 변환할 수 없는 문자열이 입력되었을 때는 NumberFormatException이 발생한다.</p>\n<p>두 메소드의 차이점은 <strong>반환값의 타입</strong>이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">NumberFormatException</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> radix<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">NumberFormatException</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>radix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> <span class=\"token class-name\">IntegerCache</span><span class=\"token punctuation\">.</span>low <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token class-name\">IntegerCache</span><span class=\"token punctuation\">.</span>high<span class=\"token punctuation\">)</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">IntegerCache</span><span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token class-name\">IntegerCache</span><span class=\"token punctuation\">.</span>low<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>첫번째 valueOf()를 보면 인자에 parseInt()가 사용된 것을 확인할 수 있다. 마지막 valueOf()를 보면 반환값으로 새로운 Integer 객체를 생성한다.</p>\n<h4 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h4>\n<p>valueOf()는 parseInt()를 호출해서 문자열을 정수값으로 변환시키고 Integer로 박싱해서 값을 반환한다. 두 메소드 모두 반환타입만 다를 뿐 같은 기능이기 때문에 상황에 맞는 메소드를 잘 선택해서 사용하면 된다.</p>\n<h2 id=\"-오늘의-마무리\" style=\"position:relative;\"><a href=\"#-%EC%98%A4%EB%8A%98%EC%9D%98-%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\" 오늘의 마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔚 오늘의 마무리</h2>\n<p>스프링 주차가 시작된 오늘! 새로운 강의가 지급되어서 열심히 들었다. Spring과 Spring Boot의 차이가 나왔다. 스프링부트는 어노테이션 기반으로 내장 톰캣을 가지고 있다는 것! 내장 톰캣을 지원해준다는 점은 개발자를 아주 편리하게 해주는 것 같다. Spring으로 프로젝트 했을 때 환경설정에서 애먹었던 순간이 잠시 떠올라서 잠시 눈을 질끈 감았다😣 부트가 2014년도에 나왔다는데 14년도 이후에 개발하게 돼서 정말 다행이라는 생각이 들었다😋</p>\n<p>요즘 스트림에 익숙해지려고 많이 노력중이다. 나도 상황에 따라 for와 stream을 알맞게 사용하고 싶다. 그래서 오늘도 모던 자바 인 액션을 읽고 동적 파라미터화에 대해 이해했다. 블로그에 적을만큼 완벽하게 이해된건 아니기 때문에 나중에 한번 더 읽어봐야겠다. 내일은 스프링 강의를 마저 듣고 람다 부분을 슬쩍 살펴봐야지!🙄</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EC%98%A4%EB%8A%98%EC%9D%98-%EB%82%B4%EC%9A%A9%EC%A0%95%EB%A6%AC\">📝 오늘의 내용정리</a></p>\n<ul>\n<li>\n<p><a href=\"#parseint%EC%99%80-valueof%EC%9D%98-%EC%B0%A8%EC%9D%B4\">parseInt()와 valueOf()의 차이</a></p>\n<ul>\n<li><a href=\"#%EA%B2%B0%EB%A1%A0\">결론</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%98%A4%EB%8A%98%EC%9D%98-%EB%A7%88%EB%AC%B4%EB%A6%AC\">🔚 오늘의 마무리</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"October 31, 2023","title":"TIL) parseInt()와 valueOf()의 차이","categories":"TIL","author":"화나","emoji":"✨"},"fields":{"slug":"/naebaecamp/today-i-learned/2023/10/20231031/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://www.hwana.com","comments":{"utterances":{"repo":"hwana/hwana.github.io"}}}}},"pageContext":{"slug":"/naebaecamp/today-i-learned/2023/11/20231101/","nextSlug":"/naebaecamp/today-i-learned/2023/10/20231031/","prevSlug":""}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}