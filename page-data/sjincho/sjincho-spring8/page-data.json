{"componentChunkName":"component---src-templates-blog-template-js","path":"/sjincho/sjincho-spring8/","result":{"data":{"cur":{"id":"e6949318-bfa9-538d-aca2-5498fd16a62c","html":"<h4 id=\"code-classlanguage-textcomponentcode\" style=\"position:relative;\"><a href=\"#code-classlanguage-textcomponentcode\" aria-label=\"code classlanguage textcomponentcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">@Component</code></h4>\n<ul>\n<li>개발자가 작성한 클래스를 빈으로 등록하기 위한 어노테이션이다.</li>\n</ul>\n<h4 id=\"code-classlanguage-textcomponentscancode\" style=\"position:relative;\"><a href=\"#code-classlanguage-textcomponentscancode\" aria-label=\"code classlanguage textcomponentscancode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">@ComponentScan</code></h4>\n<ul>\n<li><code class=\"language-text\">@Component</code>, <code class=\"language-text\">@Service</code>, <code class=\"language-text\">@Repository</code>, <code class=\"language-text\">@Controller</code>, <code class=\"language-text\">@Configuration</code>이 붙은 클래스를 찾아서 컨텍스트에 빈으로 등록해주는 어노테이션이다.</li>\n</ul>\n<h4 id=\"code-classlanguage-textbeancode\" style=\"position:relative;\"><a href=\"#code-classlanguage-textbeancode\" aria-label=\"code classlanguage textbeancode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">@Bean</code></h4>\n<ul>\n<li>개발자가 직접 제어가 불가능한 외부 라이브러리등을 빈으로 만들려할 때 사용되는 어노테이션이다.</li>\n<li>외부 라이브러리 객체를 반환하는 메소드를 만들고 @Bean 어노테이션을 사용하면 된다.</li>\n</ul>\n<h4 id=\"code-classlanguage-textcontrollercode\" style=\"position:relative;\"><a href=\"#code-classlanguage-textcontrollercode\" aria-label=\"code classlanguage textcontrollercode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">@Controller</code></h4>\n<ul>\n<li>해당 클래스가 컨트롤러 역할을 한다는 것을 알려준다.</li>\n</ul>\n<h4 id=\"code-classlanguage-textservicecode\" style=\"position:relative;\"><a href=\"#code-classlanguage-textservicecode\" aria-label=\"code classlanguage textservicecode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">@Service</code></h4>\n<ul>\n<li>해당 클래스가 비즈니스 로직을 수행한다는 것을 의미한다.</li>\n</ul>\n<h4 id=\"code-classlanguage-textrepositorycode\" style=\"position:relative;\"><a href=\"#code-classlanguage-textrepositorycode\" aria-label=\"code classlanguage textrepositorycode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">@Repository</code></h4>\n<ul>\n<li>해당 클래스가 DB에 접근하는 메소드를 포함 한다는 것을 알려준다.</li>\n</ul>\n<h4 id=\"code-classlanguage-textrequestparamcode\" style=\"position:relative;\"><a href=\"#code-classlanguage-textrequestparamcode\" aria-label=\"code classlanguage textrequestparamcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">@RequestParam</code></h4>\n<ul>\n<li>요청 URI와 어노테이션에 작성된 value 값이 일치하면 해당 클래스가 실행된다.</li>\n</ul>\n<h4 id=\"code-classlanguage-textrequestbodycode\" style=\"position:relative;\"><a href=\"#code-classlanguage-textrequestbodycode\" aria-label=\"code classlanguage textrequestbodycode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">@RequestBody</code></h4>\n<ul>\n<li>HTTP 요청 바디를 자바 객체로 매핑해준다.</li>\n</ul>\n<h4 id=\"code-classlanguage-textresponsebodycode\" style=\"position:relative;\"><a href=\"#code-classlanguage-textresponsebodycode\" aria-label=\"code classlanguage textresponsebodycode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">@ResponseBody</code></h4>\n<ul>\n<li>자바 객체를 HTTP 응답 바디로 매핑해준다.</li>\n</ul>\n<h4 id=\"code-classlanguage-textautowiredcode\" style=\"position:relative;\"><a href=\"#code-classlanguage-textautowiredcode\" aria-label=\"code classlanguage textautowiredcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">@Autowired</code></h4>\n<ul>\n<li>필드, setter, 생성자에서 사용하며, 빈을 주입해준다.</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#component\"><code class=\"language-text\">@Component</code></a></li>\n<li><a href=\"#componentscan\"><code class=\"language-text\">@ComponentScan</code></a></li>\n<li><a href=\"#bean\"><code class=\"language-text\">@Bean</code></a></li>\n<li><a href=\"#controller\"><code class=\"language-text\">@Controller</code></a></li>\n<li><a href=\"#service\"><code class=\"language-text\">@Service</code></a></li>\n<li><a href=\"#repository\"><code class=\"language-text\">@Repository</code></a></li>\n<li><a href=\"#requestparam\"><code class=\"language-text\">@RequestParam</code></a></li>\n<li><a href=\"#requestbody\"><code class=\"language-text\">@RequestBody</code></a></li>\n<li><a href=\"#responsebody\"><code class=\"language-text\">@ResponseBody</code></a></li>\n<li><a href=\"#autowired\"><code class=\"language-text\">@Autowired</code></a></li>\n</ul>\n</div>","excerpt":"개발자가 작성한 클래스를 빈으로 등록하기 위한 어노테이션이다.  , , , , 이 붙은 클래스를 찾아서 컨텍스트에 빈으로 등록해주는 어노테이션이다.  개발자가 직접 제어가 불가능한 외부 라이브러리등을 빈으로 만들려할 때 사용되는 어노테이션이다. 외부 라이브러리 객체를 반환하는 메소드를 만들고 @Bean 어노테이션을 사용하면 된다.  해당 클래스가 컨트롤러 역할을 한다는 것을 알려준다.  해당 클래스가 비즈니스 로직을 수행한다는 것을 의미한다.  해당 클래스가 DB에 접근하는 메소드를 포함 한다는 것을 알려준다.  요청 URI와 어노테이션에 작성된 value 값이 일치하면 해당 클래스가 실행된다.  HTTP 요청 바디를 자바 객체로 매핑해준다.  자바 객체를 HTTP 응답 바디로 매핑해준다.  필드, setter, 생성자에서 사용하며, 빈을 주입해준다.","frontmatter":{"date":"August 11, 2023","title":"과제8) 스프링에서 사용하는 어노테이션","categories":"스진초 자바","author":"화나","emoji":"🐢"},"fields":{"slug":"/sjincho/sjincho-spring8/"}},"next":{"id":"16426be2-1bd8-5359-b07b-676c27d8ba8e","html":"<p>스프링은 각 클래스를 빈으로 등록하기 위해서 <code class=\"language-text\">@Component</code>라는 어노테이션을 제공하지만, 실제 개발을 할 때는 <code class=\"language-text\">@Component</code>보다 <code class=\"language-text\">@Contoller</code>, <code class=\"language-text\">@Service</code>, <code class=\"language-text\">@Repository</code>를 더 많이 사용하게 되는 것 같다. 왜 <code class=\"language-text\">@Component</code>를 사용하지 않고 <code class=\"language-text\">@Component</code>의 하위개념인 어노테이션을 따로 제공하는걸까?</p>\n<p>답을 찾기 위해 스프링 공식문서를 살펴봤더니 아래와 같은 문장이 있었다.</p>\n<blockquote>\n<p>Therefore, you can annotate your component classes with @Component, but, by annotating them with @Repository, @Service, or @Controller instead, your classes are more properly suited for processing by tools or associating with aspects.</p>\n</blockquote>\n<p><code class=\"language-text\">@Component</code>를 사용하여 클래스에 주석을 달 수 있지만 <code class=\"language-text\">@Contoller</code>, <code class=\"language-text\">@Service</code>, <code class=\"language-text\">@Repository</code>을 사용하는게 도구를 활용한 처리나 다양한 측면과의 연관성을 더 적절하게 갖출 수 있다고 나와있다. 너무 번역말투라 느낌가는대로 받아들이면 더 상세하게 분류해서 어노테이션을 달아주면 여러가지 상황에 적절하게 쓸 수 있다~ 이런 뜻이 아닐까?!🤔</p>\n<p>각 계층에 따른 역할이 있고, 그 역할에 맞게 코드를 구현해 놓으면 유지보수 할 때 유연하게 대응할 수 있다는 생각이 든다! 그럼 각 계층에 역할에 대해서 알아보자.</p>\n<h2 id=\"controllerpresentation-layer\" style=\"position:relative;\"><a href=\"#controllerpresentation-layer\" aria-label=\"controllerpresentation layer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Controller(Presentation Layer)</h2>\n<ul>\n<li><code class=\"language-text\">@Contoller</code> 사용</li>\n<li>사용자의 요청을 처리하고, 이에 따른 적절한 응답을 생성하는 역할</li>\n</ul>\n<h2 id=\"serviceservice-layer\" style=\"position:relative;\"><a href=\"#serviceservice-layer\" aria-label=\"serviceservice layer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Service(Service Layer)</h2>\n<ul>\n<li><code class=\"language-text\">@Service</code> 사용</li>\n<li>비즈니스 로직을 구현하고 처리하는 부분</li>\n<li>데이터 처리를 위해 레포지토리를 호출할 수 있음</li>\n<li>컨트롤러와 데이터 액세스 계층 사이의 중간 역할</li>\n</ul>\n<h2 id=\"repositorydata-access-layer\" style=\"position:relative;\"><a href=\"#repositorydata-access-layer\" aria-label=\"repositorydata access layer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Repository(Data Access Layer)</h2>\n<ul>\n<li><code class=\"language-text\">@Repository</code> 사용</li>\n<li>데이터를 저장, 조회, 변경, 삭제하는등 데이터베이스 연상 수행</li>\n<li>이 계층에서 데이터베이스와의 통신을 추상화하기 때문에 비즈니스 로직이 데이터와 분리되어 유지보수 성을 높일 수 있음</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#controllerpresentation-layer\">Controller(Presentation Layer)</a></li>\n<li><a href=\"#serviceservice-layer\">Service(Service Layer)</a></li>\n<li><a href=\"#repositorydata-access-layer\">Repository(Data Access Layer)</a></li>\n</ul>\n</div>","frontmatter":{"date":"August 08, 2023","title":"과제7) Controller, Service, Repository","categories":"스진초 자바","author":"화나","emoji":"🐢"},"fields":{"slug":"/sjincho/sjincho-spring7/"}},"prev":{"id":"92b9d746-a417-5cfc-b78f-b2bdfe2fd97d","html":"<h3 id=\"rest\" style=\"position:relative;\"><a href=\"#rest\" aria-label=\"rest permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>REST?</h3>\n<p>REST는 Representational State Transfer의 약자로, 자원을 정의하고 자원에 대한 주소를 지정하는 방법의 모음</p>\n<h3 id=\"rest-제약조건\" style=\"position:relative;\"><a href=\"#rest-%EC%A0%9C%EC%95%BD%EC%A1%B0%EA%B1%B4\" aria-label=\"rest 제약조건 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>REST 제약조건</h3>\n<p>REST의 제약조건을 제대로 지키면서 아키텍처를 만드는것을 RESTful이라고 한다.</p>\n<ol>\n<li>클라이언트 - 서버 구조\n<ul>\n<li>서버는 API제공, 클라이언트는 세션, 로그인정보등을 직접 관리하는 구조로 각각의 역할이 확실하게 구분됨</li>\n<li>개발해야할 내용이 명확해지고 서로간의 의존성이 줄어들게 됨</li>\n</ul>\n</li>\n<li>무상태성\n<ul>\n<li>서버는 클라이언트의 상태 정보를 저장하지 않음</li>\n</ul>\n</li>\n<li>캐시 가능\n<ul>\n<li>REST는 HTTP의 웹표준을 그대로 사용하기 때문에, HTTP가 가진 캐싱 기능 적용 가능</li>\n</ul>\n</li>\n<li>계층화 시스템\n<ul>\n<li>REST 서버는 다중 계층으로 구성될 수 있음</li>\n</ul>\n</li>\n<li>자체 표현 구조\n<ul>\n<li>REST API 메시지만 보고 쉽게 이해할 수 있음</li>\n</ul>\n</li>\n<li>유니폼 인터페이스(uniform interface)\n<ul>\n<li>URI로 지정한 리소스에 대한 조작을 통일되고 한정적인 인터페이스로 수행하는 아키텍처 스타일</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"rest-api의-구성\" style=\"position:relative;\"><a href=\"#rest-api%EC%9D%98-%EA%B5%AC%EC%84%B1\" aria-label=\"rest api의 구성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>REST API의 구성</h3>\n<ol>\n<li>자원(resource) : URI</li>\n<li>행위(verb) : HTTP 메소드</li>\n<li>표현(representations) : 리소스에 대한 표현(HTTP Message Body)</li>\n</ol>\n<h3 id=\"rest-api-설계-규칙\" style=\"position:relative;\"><a href=\"#rest-api-%EC%84%A4%EA%B3%84-%EA%B7%9C%EC%B9%99\" aria-label=\"rest api 설계 규칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>REST API 설계 규칙</h3>\n<ul>\n<li>URI 설계 : URI는 웹에 있는 자원의 이름과 위치를 식별한다.</li>\n<li>명사 사용 : URI는 명사를 사용하여야 하며, 세부적인 표현의 한계가 있을때는 동사를 포함할 수도있다.</li>\n<li>동사는 HTTP 메소드로 표현 : 동사(자원에 대한 행위)는 HTTP 메소드는 GET, PUT, DELETE, POST로 표현하여야 한다.</li>\n<li>복수형 사용</li>\n<li>슬래시(/)로 계층관계 표현 : URI의 마지막에는 슬래시를 넣지 않는다.</li>\n<li>URI는 소문자로 작성</li>\n<li>가독성을 높이려면 하이픈(-)사용 / (_) 사용금지</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#rest\">REST?</a></li>\n<li><a href=\"#rest-%EC%A0%9C%EC%95%BD%EC%A1%B0%EA%B1%B4\">REST 제약조건</a></li>\n<li><a href=\"#rest-api%EC%9D%98-%EA%B5%AC%EC%84%B1\">REST API의 구성</a></li>\n<li><a href=\"#rest-api-%EC%84%A4%EA%B3%84-%EA%B7%9C%EC%B9%99\">REST API 설계 규칙</a></li>\n</ul>\n</div>","frontmatter":{"date":"August 12, 2023","title":"과제9) REST API 30초만에 이해하기","categories":"스진초 자바","author":"화나","emoji":"🐢"},"fields":{"slug":"/sjincho/sjincho-spring9/"}},"site":{"siteMetadata":{"siteUrl":"https://www.hwana.com","comments":{"utterances":{"repo":"hwana/hwana.github.io"}}}}},"pageContext":{"slug":"/sjincho/sjincho-spring8/","nextSlug":"/sjincho/sjincho-spring7/","prevSlug":"/sjincho/sjincho-spring9/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}