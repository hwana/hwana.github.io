{"componentChunkName":"component---src-templates-blog-template-js","path":"/sjincho/sjincho-spring6/","result":{"data":{"cur":{"id":"e01b47b8-1672-5542-a42a-1d2073a337d5","html":"<h3 id=\"dtodata-transfer-object\" style=\"position:relative;\"><a href=\"#dtodata-transfer-object\" aria-label=\"dtodata transfer object permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DTO(Data Transfer Object)</h3>\n<ul>\n<li>데이터 이동 객체라는 의미를 갖는다.</li>\n<li>계층 간 데이터를 주고 받을 때 사용하며 로직을 갖지않는 순수한 데이터 객체이다.</li>\n<li>데이터를 어떤 방식으로 초기화하느냐에 따라서 가변객체/불변객체로 구분된다.</li>\n</ul>\n<h4 id=\"가변객체--setter로-데이터를-초기화하는-경우\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EB%B3%80%EA%B0%9D%EC%B2%B4--setter%EB%A1%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%B4%88%EA%B8%B0%ED%99%94%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0\" aria-label=\"가변객체  setter로 데이터를 초기화하는 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가변객체 : setter로 데이터를 초기화하는 경우</h4>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"불변객체--생성자로-데이터를-초기화-하는-경우\" style=\"position:relative;\"><a href=\"#%EB%B6%88%EB%B3%80%EA%B0%9D%EC%B2%B4--%EC%83%9D%EC%84%B1%EC%9E%90%EB%A1%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%B4%88%EA%B8%B0%ED%99%94-%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0\" aria-label=\"불변객체  생성자로 데이터를 초기화 하는 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>불변객체 : 생성자로 데이터를 초기화 하는 경우</h4>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\">//생성자</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"vovalue-object\" style=\"position:relative;\"><a href=\"#vovalue-object\" aria-label=\"vovalue object permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>VO(Value Object)</h3>\n<ul>\n<li>값 자체를 표현하는 객체</li>\n<li>객체의 불변성을 보장하고 값을 읽는 것만 가능하다.</li>\n<li>서로 다른 이름을 가진 VO더라도 모든 속성 값이 같다면 두 인스턴스는 같은 객체라고 할 수 있다. 이를 보장하기 위해서는 Object 클래스의 <code class=\"language-text\">equals()</code> 와 <code class=\"language-text\">hashCode()</code>를 오버라이딩 해야한다.</li>\n</ul>\n<h3 id=\"entity\" style=\"position:relative;\"><a href=\"#entity\" aria-label=\"entity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Entity</h3>\n<ul>\n<li>데이터베이스 테이블과 1:1로 매핑되는 클래스로 DB 테이블 내의 컬럼만 필드로 가져야 한다.</li>\n<li>Entity를 기준으로 테이블이 생성되고 스키마가 변경되기 때문에 요청이나 응답값을 전달하는 클래스로 사용하면 안된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>persistence<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token annotation punctuation\">@Entity</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\r\n   <span class=\"token annotation punctuation\">@Id</span>\r\n   <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\r\n   privae <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\r\n\r\n   <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>nullable <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\r\n   <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\r\n\r\n   <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>nullable <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\r\n   <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> email<span class=\"token punctuation\">;</span>\r\n\r\n   <span class=\"token annotation punctuation\">@Builder</span>\r\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> email<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\r\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>email <span class=\"token operator\">=</span> email<span class=\"token punctuation\">;</span>\r\n   <span class=\"token punctuation\">}</span>\r\n\r\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> email<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\r\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>email <span class=\"token operator\">=</span> email<span class=\"token punctuation\">;</span>\r\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\r\n   <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"비교하기\" style=\"position:relative;\"><a href=\"#%EB%B9%84%EA%B5%90%ED%95%98%EA%B8%B0\" aria-label=\"비교하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비교하기</h3>\n<table>\n<thead>\n<tr>\n<th>DTO</th>\n<th>VO</th>\n<th>Entity</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>레이어 간 데이터 전송만을 위한 객체</td>\n<td>값을 표현하기 위한 객체</td>\n<td>DB 테이블을 매핑하기 위한 객체</td>\n</tr>\n<tr>\n<td>가변성, 읽고 쓰는 것 모두 가능</td>\n<td>불변성, 읽는것만 가능</td>\n<td>가변성, 읽고 쓰는 것 모두 가능</td>\n</tr>\n<tr>\n<td>로직을 포함할 수 없음</td>\n<td>로직을 포함할 수 있음</td>\n<td>로직을 포함할 수 있음</td>\n</tr>\n</tbody>\n</table>\n<p><a href=\"https://devmoony.tistory.com/180\">출처1</a>\r\n<a href=\"https://youngjinmo.github.io/2021/04/dto-vo-entity/\">출처2</a></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#dtodata-transfer-object\">DTO(Data Transfer Object)</a></p>\n<ul>\n<li><a href=\"#%EA%B0%80%EB%B3%80%EA%B0%9D%EC%B2%B4--setter%EB%A1%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%B4%88%EA%B8%B0%ED%99%94%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0\">가변객체 : setter로 데이터를 초기화하는 경우</a></li>\n<li><a href=\"#%EB%B6%88%EB%B3%80%EA%B0%9D%EC%B2%B4--%EC%83%9D%EC%84%B1%EC%9E%90%EB%A1%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%B4%88%EA%B8%B0%ED%99%94-%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0\">불변객체 : 생성자로 데이터를 초기화 하는 경우</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#vovalue-object\">VO(Value Object)</a></p>\n</li>\n<li>\n<p><a href=\"#entity\">Entity</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%B9%84%EA%B5%90%ED%95%98%EA%B8%B0\">비교하기</a></p>\n</li>\n</ul>\n</div>","excerpt":"DTO(Data Transfer Object) 데이터 이동 객체라는 의미를 갖는다. 계층 간 데이터를 주고 받을 때 사용하며 로직을 갖지않는 순수한 데이터 객체이다. 데이터를 어떤 방식으로 초기화하느냐에 따라서 가변객체/불변객체로 구분된다. 가변객체 : setter로 데이터를 초기화하는 경우 불변객체 : 생성자로 데이터를 초기화 하는 경우 VO(Value Object) 값 자체를 표현하는 객체 객체의 불변성을 보장하고 값을 읽는 것만 가능하다. 서로 다른 이름을 가진 VO더라도 모든 속성 값이 같다면 두 인스턴스는 같은 객체라고 할 수 있다. 이를 보장하기 위해서는 Object 클래스의  와 를 오버라이딩 해야한다. Entity 데이터베이스 테이블과 1:1로 매핑되는 클래스로 DB 테이블 내의 컬럼만 필드로 가져야 한다. Entity를 기준으로 테이블이 생성되고 스키마가 변경되기 때문에 요청이나 응답값을 전달하는 클래스로 사용하면 안된다. 비교하기 DTO VO Entity 레이어 …","frontmatter":{"date":"August 04, 2023","title":"과제6) Entity, VO, DTO","categories":"스진초","author":"화나","emoji":"🐢"},"fields":{"slug":"/sjincho/sjincho-spring6/"}},"next":{"id":"93bd170a-cde9-5598-87e3-7302abf2fb41","html":"<p>오늘의 과제는 도메인 주도 설계와 SQL 중심 설계에 대해서 공부하고 비교해보는 것!</p>\n<h2 id=\"ddddomain-driven-design\" style=\"position:relative;\"><a href=\"#ddddomain-driven-design\" aria-label=\"ddddomain driven design permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DDD(Domain-Driven Design)</h2>\n<h3 id=\"개념\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EB%85%90\" aria-label=\"개념 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개념</h3>\n<h4 id=\"도메인\" style=\"position:relative;\"><a href=\"#%EB%8F%84%EB%A9%94%EC%9D%B8\" aria-label=\"도메인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>도메인</h4>\n<p>소프트웨어로 해결하고자하는 문제의 영역</p>\n<h4 id=\"도메인-모델\" style=\"position:relative;\"><a href=\"#%EB%8F%84%EB%A9%94%EC%9D%B8-%EB%AA%A8%EB%8D%B8\" aria-label=\"도메인 모델 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>도메인 모델</h4>\n<ul>\n<li>특정 도메인을 개념적으로 표현한 것</li>\n<li>도메인 모델을 사용하면 동일한 모습으로 도메인을 이해하고, 지식을 공유하는데 도움이 된다.</li>\n</ul>\n<h4 id=\"도메인-주도-설계\" style=\"position:relative;\"><a href=\"#%EB%8F%84%EB%A9%94%EC%9D%B8-%EC%A3%BC%EB%8F%84-%EC%84%A4%EA%B3%84\" aria-label=\"도메인 주도 설계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>도메인 주도 설계</h4>\n<ul>\n<li>도메인 패턴을 중심에 놓고 설계하는 방식</li>\n</ul>\n<h3 id=\"특징\" style=\"position:relative;\"><a href=\"#%ED%8A%B9%EC%A7%95\" aria-label=\"특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>특징</h3>\n<ul>\n<li>데이터 중심의 접근법이 아니라 도메인의 모델과 로직에 집중한다.</li>\n<li>보편적인 언어를 사용한다.</li>\n<li>분석 모델과 설계, 코드가 모두 다른 구조가 아닌 도메인 모델부터 코드까지 항상 움직이는 구조의 모델을 지향한다.</li>\n</ul>\n<h2 id=\"sql-중심-설계\" style=\"position:relative;\"><a href=\"#sql-%EC%A4%91%EC%8B%AC-%EC%84%A4%EA%B3%84\" aria-label=\"sql 중심 설계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SQL 중심 설계</h2>\n<h3 id=\"정의\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%9D%98\" aria-label=\"정의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정의</h3>\n<ul>\n<li>데이터베이스의 설계에서 시작되는 소프트웨어 개발 방법론중 하나</li>\n</ul>\n<h3 id=\"특징-1\" style=\"position:relative;\"><a href=\"#%ED%8A%B9%EC%A7%95-1\" aria-label=\"특징 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>특징</h3>\n<ul>\n<li>데이터베이스 구조와 데이터 흐름을 중심으로 시스템을 설계하고 개발 프로세스를 진행한다.</li>\n</ul>\n<h2 id=\"차이점\" style=\"position:relative;\"><a href=\"#%EC%B0%A8%EC%9D%B4%EC%A0%90\" aria-label=\"차이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>차이점</h2>\n<table>\n<thead>\n<tr>\n<th>DDD 설계</th>\n<th>SQL 중심 설계</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>도메인 중심 설계</td>\n<td>데이터베이스 중심 설계</td>\n</tr>\n<tr>\n<td>도메인의 문제 영역을 중심으로 설계</td>\n<td>데이터베이스 구조와 데이터의 흐름을 중심으로 설계</td>\n</tr>\n<tr>\n<td>도메인 모델을 통해 도메인 일관성 유지</td>\n<td>데이터베이스 정규화를 통해 데이터 일관성 유지</td>\n</tr>\n<tr>\n<td>도메인 모델을 통해 비즈니스 로직 처리</td>\n<td>데이터베이스 쿼리를 통해 데이터 처리</td>\n</tr>\n<tr>\n<td>도메인 모델이 변경되더라도 시스템의 일부분만 변경</td>\n<td>데이터베이스 구조가 변경되면 시스템 전체에 영향</td>\n</tr>\n</tbody>\n</table>\n<p><a href=\"https://diary-blockchain.tistory.com/283\">출처</a></p>\n<blockquote>\n<p>하루만에 파악할 수 있는 개념이 아니기 때문에 간단하게 정리했다😏 내가 접해본 방식은 SQL 중심 설계이기 때문에 기회가 된다면 도메인 주도 설계를 접해보고 깊에 알아가봐야지!</p>\n</blockquote>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#ddddomain-driven-design\">DDD(Domain-Driven Design)</a></p>\n<ul>\n<li>\n<p><a href=\"#%EA%B0%9C%EB%85%90\">개념</a></p>\n<ul>\n<li><a href=\"#%EB%8F%84%EB%A9%94%EC%9D%B8\">도메인</a></li>\n<li><a href=\"#%EB%8F%84%EB%A9%94%EC%9D%B8-%EB%AA%A8%EB%8D%B8\">도메인 모델</a></li>\n<li><a href=\"#%EB%8F%84%EB%A9%94%EC%9D%B8-%EC%A3%BC%EB%8F%84-%EC%84%A4%EA%B3%84\">도메인 주도 설계</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%ED%8A%B9%EC%A7%95\">특징</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#sql-%EC%A4%91%EC%8B%AC-%EC%84%A4%EA%B3%84\">SQL 중심 설계</a></p>\n<ul>\n<li><a href=\"#%EC%A0%95%EC%9D%98\">정의</a></li>\n<li><a href=\"#%ED%8A%B9%EC%A7%95-1\">특징</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%B0%A8%EC%9D%B4%EC%A0%90\">차이점</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"August 03, 2023","title":"과제5) DDD와 SQL 중심 설계","categories":"스진초","author":"화나","emoji":"🐢"},"fields":{"slug":"/sjincho/sjincho-spring5/"}},"prev":{"id":"18bb9f80-935c-58b8-8e80-88a66c064c9b","html":"<p>스프링은 각 클래스를 빈으로 등록하기 위해서 <code class=\"language-text\">@Component</code>라는 어노테이션을 제공하지만, 실제 개발을 할 때는 <code class=\"language-text\">@Component</code>보다 <code class=\"language-text\">@Contoller</code>, <code class=\"language-text\">@Service</code>, <code class=\"language-text\">@Repository</code>를 더 많이 사용하게 되는 것 같다. 왜 <code class=\"language-text\">@Component</code>를 사용하지 않고 <code class=\"language-text\">@Component</code>의 하위개념인 어노테이션을 따로 제공하는걸까?</p>\n<p>답을 찾기 위해 스프링 공식문서를 살펴봤더니 아래와 같은 문장이 있었다.</p>\n<blockquote>\n<p>Therefore, you can annotate your component classes with @Component, but, by annotating them with @Repository, @Service, or @Controller instead, your classes are more properly suited for processing by tools or associating with aspects.</p>\n</blockquote>\n<p><code class=\"language-text\">@Component</code>를 사용하여 클래스에 주석을 달 수 있지만 <code class=\"language-text\">@Contoller</code>, <code class=\"language-text\">@Service</code>, <code class=\"language-text\">@Repository</code>을 사용하는게 도구를 활용한 처리나 다양한 측면과의 연관성을 더 적절하게 갖출 수 있다고 나와있다. 너무 번역말투라 느낌가는대로 받아들이면 더 상세하게 분류해서 어노테이션을 달아주면 여러가지 상황에 적절하게 쓸 수 있다~ 이런 뜻이 아닐까?!🤔</p>\n<p>각 계층에 따른 역할이 있고, 그 역할에 맞게 코드를 구현해 놓으면 유지보수 할 때 유연하게 대응할 수 있다는 생각이 든다! 그럼 각 계층에 역할에 대해서 알아보자.</p>\n<h2 id=\"controllerpresentation-layer\" style=\"position:relative;\"><a href=\"#controllerpresentation-layer\" aria-label=\"controllerpresentation layer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Controller(Presentation Layer)</h2>\n<ul>\n<li><code class=\"language-text\">@Contoller</code> 사용</li>\n<li>사용자의 요청을 처리하고, 이에 따른 적절한 응답을 생성하는 역할</li>\n</ul>\n<h2 id=\"serviceservice-layer\" style=\"position:relative;\"><a href=\"#serviceservice-layer\" aria-label=\"serviceservice layer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Service(Service Layer)</h2>\n<ul>\n<li><code class=\"language-text\">@Service</code> 사용</li>\n<li>비즈니스 로직을 구현하고 처리하는 부분</li>\n<li>데이터 처리를 위해 레포지토리를 호출할 수 있음</li>\n<li>컨트롤러와 데이터 액세스 계층 사이의 중간 역할</li>\n</ul>\n<h2 id=\"repositorydata-access-layer\" style=\"position:relative;\"><a href=\"#repositorydata-access-layer\" aria-label=\"repositorydata access layer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Repository(Data Access Layer)</h2>\n<ul>\n<li><code class=\"language-text\">@Repository</code> 사용</li>\n<li>데이터를 저장, 조회, 변경, 삭제하는등 데이터베이스 연상 수행</li>\n<li>이 계층에서 데이터베이스와의 통신을 추상화하기 때문에 비즈니스 로직이 데이터와 분리되어 유지보수 성을 높일 수 있음</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#controllerpresentation-layer\">Controller(Presentation Layer)</a></li>\n<li><a href=\"#serviceservice-layer\">Service(Service Layer)</a></li>\n<li><a href=\"#repositorydata-access-layer\">Repository(Data Access Layer)</a></li>\n</ul>\n</div>","frontmatter":{"date":"August 08, 2023","title":"과제7) Controller, Service, Repository","categories":"스진초","author":"화나","emoji":"🐢"},"fields":{"slug":"/sjincho/sjincho-spring7/"}},"site":{"siteMetadata":{"siteUrl":"https://www.hwana.com","comments":{"utterances":{"repo":"hwana/hwana.github.io"}}}}},"pageContext":{"slug":"/sjincho/sjincho-spring6/","nextSlug":"/sjincho/sjincho-spring5/","prevSlug":"/sjincho/sjincho-spring7/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}