{"componentChunkName":"component---src-templates-blog-template-js","path":"/security/filter-exception-handler/","result":{"data":{"cur":{"id":"d05219b6-60e7-5f52-b472-27d11993726d","html":"<p>Filter에서 발생하는 Exception 처리하기</p>","excerpt":"Filter에서 발생하는 Exception 처리하기","frontmatter":{"date":"November 14, 2023","title":"Filter에서 발생하는 Exception 처리하기","categories":"보안","author":"화나","emoji":"🔐"},"fields":{"slug":"/security/filter-exception-handler/"}},"next":{"id":"9aa8e582-2e2f-5f80-81a2-d0ed3b67e419","html":"<h2 id=\"valid\" style=\"position:relative;\"><a href=\"#valid\" aria-label=\"valid permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@Valid</h2>\n<p>자바에서 사용되는 어노테이션 중 하나로, HTTP 요청 데이터를 객체로 반환할 때 유효성 검사를 수행하는 어노테이션이다.</p>\n<h3 id=\"localvalidatorfactorybean\" style=\"position:relative;\"><a href=\"#localvalidatorfactorybean\" aria-label=\"localvalidatorfactorybean permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>LocalValidatorFactoryBean</strong></h3>\n<p>스프링에서 제공하는 Validator 인터페이스의 구현체 중 하나이다. 스프링 어플리케이션 컨텍스트 내에서 사용되며 @Valid 어노테이션을 통한 데이터 유효성 검사를 처리한다. 스프링에서는 validation 의존성만 추가해주면 자동으로 빈 등록이 되어 사용할 수 있다.</p>\n<h3 id=\"사용법\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-label=\"사용법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용법</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SignupRequestDto</span> <span class=\"token punctuation\">{</span>\r\n\t<span class=\"token annotation punctuation\">@NotBlank</span>\r\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">;</span>\r\n\t<span class=\"token annotation punctuation\">@NotBlank</span>\r\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user/signup\"</span><span class=\"token punctuation\">)</span>\r\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">signup</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Valid</span> <span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">SignupRequestDto</span> requestDto<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>유효성을 검증할 데이터를 받아올 DTO를 생성하고, 각 필드에 검증하고 싶은 유효성 어노테이션을 붙여준다. 해당 DTO에 @Valid 어노테이션을 붙이면 유효성 검증을 할 수 있다.</p>\n<h3 id=\"검증-실패\" style=\"position:relative;\"><a href=\"#%EA%B2%80%EC%A6%9D-%EC%8B%A4%ED%8C%A8\" aria-label=\"검증 실패 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>검증 실패</h3>\n<p>검증에 실패할 경우 MethodArgumentNotValidException 예외를 던지게 된다.</p>\n<h2 id=\"커스텀-어노테이션\" style=\"position:relative;\"><a href=\"#%EC%BB%A4%EC%8A%A4%ED%85%80-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98\" aria-label=\"커스텀 어노테이션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>커스텀 어노테이션</h2>\n<h3 id=\"회원가입-데이터의-조건\" style=\"position:relative;\"><a href=\"#%ED%9A%8C%EC%9B%90%EA%B0%80%EC%9E%85-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98-%EC%A1%B0%EA%B1%B4\" aria-label=\"회원가입 데이터의 조건 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>회원가입 데이터의 조건</h3>\n<ul>\n<li>사용자 이름 : 최소 4자 이상, 10자 이하이며 알파벳 소문자, 숫자로 구성되어야 한다.</li>\n<li>비밀번호 : 최소 8자 이상, 15자 이하이며 알파벳 대소문자, 숫자로 구성되어야 한다.</li>\n</ul>\n<h3 id=\"signuprequestdto\" style=\"position:relative;\"><a href=\"#signuprequestdto\" aria-label=\"signuprequestdto permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SignupRequestDto</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Getter</span>\r\n<span class=\"token annotation punctuation\">@NoArgsConstructor</span>\r\n<span class=\"token annotation punctuation\">@AllArgsConstructor</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SignupRequestDto</span> <span class=\"token punctuation\">{</span>\r\n\t<span class=\"token annotation punctuation\">@Username</span>\r\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">;</span>\r\n\t<span class=\"token annotation punctuation\">@Password</span>\r\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"username-password\" style=\"position:relative;\"><a href=\"#username-password\" aria-label=\"username password permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@Username, @Password</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>FIELD<span class=\"token punctuation\">)</span>\r\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\r\n<span class=\"token annotation punctuation\">@Constraint</span><span class=\"token punctuation\">(</span>validatedBy <span class=\"token operator\">=</span> <span class=\"token class-name\">UsernameValidator</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token annotation punctuation\">@Documented</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Username</span> <span class=\"token punctuation\">{</span>\r\n\r\n\t<span class=\"token class-name\">String</span> <span class=\"token function\">message</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"사용자 이름은 최소 4자 이상, 10자 이하이며 알파벳 소문자, 숫자로 구성되어야 합니다.\"</span><span class=\"token punctuation\">;</span>\r\n\r\n\t<span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">groups</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n\t<span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Payload</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">payload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token annotation punctuation\">@Documented</span>\r\n<span class=\"token annotation punctuation\">@Constraint</span><span class=\"token punctuation\">(</span>validatedBy <span class=\"token operator\">=</span> <span class=\"token class-name\">PasswordValidator</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>FIELD<span class=\"token punctuation\">)</span>\r\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Password</span> <span class=\"token punctuation\">{</span>\r\n\r\n\t\t<span class=\"token class-name\">String</span> <span class=\"token function\">message</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"비밀번호는 최소 8자 이상, 15자 이하이며 알파벳 대, 소문자, 숫자로 구성되어야 합니다.\"</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">groups</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Payload</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">payload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>@Target(ElementType.FIELD)\n<ul>\n<li>이 어노테이션을 필드에만 적용할 수 있도록 지정</li>\n</ul>\n</li>\n<li>@Retention(RetentionPolicy.RUNTIME)\n<ul>\n<li>런타임시에도 이 어노테이션 정보를 유지할 수 있도록 저장</li>\n</ul>\n</li>\n<li>@Constraint(validatedBy = UsernameValidator.class)\n<ul>\n<li>이 어노테이션의 실제 유효성 검사를 수행하는 클래스를 지정</li>\n</ul>\n</li>\n<li>@Documented\n<ul>\n<li>이 어노테이션의 정보가 Javadoc에 포함되도록 지정</li>\n</ul>\n</li>\n<li>String message() default\n<ul>\n<li>어노테이션이 유효성 검사에 실패할 경우 사용할 디폴트 에러 메시지를 정의</li>\n</ul>\n</li>\n<li>Class&#x3C;?>[] groups() default {};\n<ul>\n<li>Bean Validation에서 그룹화를 지원하기 위한 설정, 사용하지 않으면 비어있는 배열 사용</li>\n</ul>\n</li>\n<li>Class&#x3C;? extends Payload>[] payload() default {};\n<ul>\n<li>추가적인 정보를 전달할 때 사용, 사용하지 않으면 비어있는 배열 사용</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"usernamevalidator-passwordvalidator\" style=\"position:relative;\"><a href=\"#usernamevalidator-passwordvalidator\" aria-label=\"usernamevalidator passwordvalidator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>UsernameValidator, PasswordValidator</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UsernameValidator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ConstraintValidator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Username</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\r\n\r\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> MIN_SIZE <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> MAX_SIZE <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> regexUsername <span class=\"token operator\">=</span> <span class=\"token string\">\"^[a-z0-9]+[a-z0-9]{\"</span> <span class=\"token operator\">+</span> MIN_SIZE <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">+</span> MAX_SIZE <span class=\"token operator\">+</span> <span class=\"token string\">\"}$\"</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token annotation punctuation\">@Override</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ConstraintValidatorContext</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">boolean</span> isValidUsername <span class=\"token operator\">=</span> username<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span>regexUsername<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isValidUsername<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            context<span class=\"token punctuation\">.</span><span class=\"token function\">disableDefaultConstraintViolation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            context<span class=\"token punctuation\">.</span><span class=\"token function\">buildConstraintViolationWithTemplate</span><span class=\"token punctuation\">(</span>\r\n                    <span class=\"token class-name\">MessageFormat</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0}자 이상의 {1}자 이하의 숫자, 영문자를 포함한 이름을 입력해주세요.\"</span><span class=\"token punctuation\">,</span>\r\n                            MIN_SIZE<span class=\"token punctuation\">,</span>\r\n                            MAX_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addConstraintViolation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n        <span class=\"token keyword\">return</span> isValidUsername<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token annotation punctuation\">@Component</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PasswordValidator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ConstraintValidator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Password</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\r\n\r\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> MIN_SIZE <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> MAX_SIZE <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> regexPassword <span class=\"token operator\">=</span> <span class=\"token string\">\"^(?=.*[A-Za-z])(?=.*[0-9])[A-Za-z0-9]{\"</span> <span class=\"token operator\">+</span> MIN_SIZE <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">+</span> MAX_SIZE <span class=\"token operator\">+</span> <span class=\"token string\">\"}$\"</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token annotation punctuation\">@Override</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> password<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ConstraintValidatorContext</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">boolean</span> isValidPassword <span class=\"token operator\">=</span> password<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span>regexPassword<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isValidPassword<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            context<span class=\"token punctuation\">.</span><span class=\"token function\">disableDefaultConstraintViolation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            context<span class=\"token punctuation\">.</span><span class=\"token function\">buildConstraintViolationWithTemplate</span><span class=\"token punctuation\">(</span>\r\n                            <span class=\"token class-name\">MessageFormat</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0}자 이상의 {1}자 이하의 숫자, 대,소문자를 포함한 비밀번호를 입력해주세요\"</span><span class=\"token punctuation\">,</span> MIN_SIZE<span class=\"token punctuation\">,</span> MAX_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">addConstraintViolation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n        <span class=\"token keyword\">return</span> isValidPassword<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>isValid() : 유효성 검사를 진행하는 로직 작성</li>\n<li>context.disableDefaultConstraintViolation() : 기본 에러 메시지를 사용하지 않도록 설정</li>\n<li>context.buildConstraintViolationWithTemplate() : 사용자 정의 에러 메시지를 추가</li>\n<li>addConstraintViolation() : 에러가 발생하게 되면 에러 정보를 ConstraintValidatorContext에 추가하여 클라이언트에게 전달한다. 전달된 정보는 에러 메시지를 생성하는데 사용된다.</li>\n</ul>\n<p><a href=\"https://mangkyu.tistory.com/206\">참고1</a>\r\n<a href=\"https://velog.io/@livenow/Java-%EC%BB%A4%EC%8A%A4%ED%85%80-%EC%95%A0%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98%EC%9C%BC%EB%A1%9C-Password%EA%B7%9C%EC%B9%99-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0\">참고2</a></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#valid\">@Valid</a></p>\n<ul>\n<li><a href=\"#localvalidatorfactorybean\"><strong>LocalValidatorFactoryBean</strong></a></li>\n<li><a href=\"#%EC%82%AC%EC%9A%A9%EB%B2%95\">사용법</a></li>\n<li><a href=\"#%EA%B2%80%EC%A6%9D-%EC%8B%A4%ED%8C%A8\">검증 실패</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%BB%A4%EC%8A%A4%ED%85%80-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98\">커스텀 어노테이션</a></p>\n<ul>\n<li><a href=\"#%ED%9A%8C%EC%9B%90%EA%B0%80%EC%9E%85-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98-%EC%A1%B0%EA%B1%B4\">회원가입 데이터의 조건</a></li>\n<li><a href=\"#signuprequestdto\">SignupRequestDto</a></li>\n<li><a href=\"#username-password\">@Username, @Password</a></li>\n<li><a href=\"#usernamevalidator-passwordvalidator\">UsernameValidator, PasswordValidator</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"November 13, 2023","title":"커스텀 어노테이션으로 회원가입 유효성 검사하기","categories":"자바","author":"화나","emoji":"🐌"},"fields":{"slug":"/java/java-valid-custom-annotation/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://www.hwana.com","comments":{"utterances":{"repo":"hwana/hwana.github.io"}}}}},"pageContext":{"slug":"/security/filter-exception-handler/","nextSlug":"/java/java-valid-custom-annotation/","prevSlug":""}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}