{"componentChunkName":"component---src-templates-blog-template-js","path":"/java/java-class-instance/","result":{"data":{"cur":{"id":"9aa2a387-ea08-53bc-a592-3727e30b3531","html":"<h2 id=\"클래스\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"클래스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스</h2>\n<p>클래스란 객체를 정의해 놓은 것이며, 객체를 생성하는데 사용된다.\r\n클래스를 잘 만들어 놓으면 객체를 생성할 때마다 고민을 할 필요가 없으며, 만들어 놓은 클래스로부터 객체를 생성해서 사용하기만 하면 된다.</p>\n<blockquote>\n<p>우리는 JDK에서 제공하는 클래스들을 이용해서 쉽게 프로그램을 작성할 수 있다.</p>\n</blockquote>\n<h3 id=\"클래스의-또-다른-정의\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EC%9D%98-%EB%98%90-%EB%8B%A4%EB%A5%B8-%EC%A0%95%EC%9D%98\" aria-label=\"클래스의 또 다른 정의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스의 또 다른 정의</h3>\n<ol>\n<li>데이터와 함수의 결합\r\n함수와 데이터는 관계가 깊기 때문에 자바에서는 변수와 함수를 하나의 클래스에 정의하여 관계가 깊은 변수와 함수를 함께 다룰 수 있게했다.</li>\n<li>사용자 정의 타입\r\n사용자 정의 타입은 사용자가 기능 동작을 위한 데이터와 함수를 묶어서 정의하는 것이다.</li>\n</ol>\n<h2 id=\"객체\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4\" aria-label=\"객체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체</h2>\n<p>객체는 클래스의 정의된 내용대로 메모리에 생성된 것이다.\r\n클래스로부터 객체를 만드는 것을 클래스의 인스턴스화라고 하며, 어떤 클래스로부터 만들어진 객체를 그 클래스의 인스턴스라고 한다.\r\n객체는 포괄적인 의미를 가지고 있다면, 인스턴스는 객체보다 구체적인 의미인 어떤 클래스로부터 만들어진 것인지를 강조하고 있다.</p>\n<h3 id=\"인스턴스의-생성과-사용\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EC%9D%98-%EC%83%9D%EC%84%B1%EA%B3%BC-%EC%82%AC%EC%9A%A9\" aria-label=\"인스턴스의 생성과 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인스턴스의 생성과 사용</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Tv</span> t<span class=\"token punctuation\">;</span> <span class=\"token comment\">//Tv클래스 타입의 참조변수 t를 선언, 메모리에 참조변수 t를 위한 공간이 마련된다. 아직 인스턴스가 생성되지 않았으므로 참조변수로 아무것도 할 수 없다.</span>\r\nt <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Tv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//연산자 new에 의해서 Tv클래스의 인스턴스가 메모리의 빈 공간에 생성된다. 대입연산자 = 에 의해서 생성된 객체의 주소값이 참조변수 t에 저장된다. 이제 참조변수 t를 통해서 인스턴스에 접근할 수 있다.</span></code></pre></div>\n<h2 id=\"변수\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EC%88%98\" aria-label=\"변수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수</h2>\n<p>변수의 종류를 결정짓는 중요한 요소는 변수의 선언된 위치!</p>\n<h3 id=\"멤버변수\" style=\"position:relative;\"><a href=\"#%EB%A9%A4%EB%B2%84%EB%B3%80%EC%88%98\" aria-label=\"멤버변수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>멤버변수</h3>\n<h4 id=\"클래스변수--클래스가-메모리에-로딩될-때-생성되어-프로그램이-종료될-때-까지-유지된다\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EB%B3%80%EC%88%98--%ED%81%B4%EB%9E%98%EC%8A%A4%EA%B0%80-%EB%A9%94%EB%AA%A8%EB%A6%AC%EC%97%90-%EB%A1%9C%EB%94%A9%EB%90%A0-%EB%95%8C-%EC%83%9D%EC%84%B1%EB%90%98%EC%96%B4-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%9D%B4-%EC%A2%85%EB%A3%8C%EB%90%A0-%EB%95%8C-%EA%B9%8C%EC%A7%80-%EC%9C%A0%EC%A7%80%EB%90%9C%EB%8B%A4\" aria-label=\"클래스변수  클래스가 메모리에 로딩될 때 생성되어 프로그램이 종료될 때 까지 유지된다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스변수 : 클래스가 메모리에 로딩될 때 생성되어 프로그램이 종료될 때 까지 유지된다.</h4>\n<ul>\n<li>인스턴스 변수 앞에 <strong>static</strong>을 붙이면 되고, 인스턴스를 생성하지 않아도 언제든지 사용이 가능하다.</li>\n<li>모든 인스턴스가 공통된 저장공간을 공유하게 되므로 모든 인스턴스들이 공통적으로 값을 유지해야하는 경우 사용해야 한다.</li>\n</ul>\n<h4 id=\"인스턴스변수--클래스-영역에-선언되며-인스턴스를-생성할-때-만들어진다\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EB%B3%80%EC%88%98--%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%98%81%EC%97%AD%EC%97%90-%EC%84%A0%EC%96%B8%EB%90%98%EB%A9%B0-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EB%A5%BC-%EC%83%9D%EC%84%B1%ED%95%A0-%EB%95%8C-%EB%A7%8C%EB%93%A4%EC%96%B4%EC%A7%84%EB%8B%A4\" aria-label=\"인스턴스변수  클래스 영역에 선언되며 인스턴스를 생성할 때 만들어진다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인스턴스변수 : 클래스 영역에 선언되며, 인스턴스를 생성할 때 만들어진다.</h4>\n<ul>\n<li>인스턴스는 독립적인 공간을 가지므로 서로 다른 값을 가질수 있기 때문에 각각 고유한 상태를 유지해야하는 속성의 경우 인스턴스 변수로 선언한다.</li>\n</ul>\n<h3 id=\"지역변수\" style=\"position:relative;\"><a href=\"#%EC%A7%80%EC%97%AD%EB%B3%80%EC%88%98\" aria-label=\"지역변수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>지역변수</h3>\n<ul>\n<li>메소드 내에 선언되어 메소드내에서만 사용 가능하며, 메소드가 종료되면 소멸되어 사용할 수 없게된다.</li>\n</ul>\n<h2 id=\"변수의-초기화\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EC%88%98%EC%9D%98-%EC%B4%88%EA%B8%B0%ED%99%94\" aria-label=\"변수의 초기화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수의 초기화</h2>\n<p>멤버변수와 배열의 초기화는 선택적이지만, 지역변수의 초기화는 필수적이다.</p>\n<h3 id=\"멤버변수의-초기화-방법\" style=\"position:relative;\"><a href=\"#%EB%A9%A4%EB%B2%84%EB%B3%80%EC%88%98%EC%9D%98-%EC%B4%88%EA%B8%B0%ED%99%94-%EB%B0%A9%EB%B2%95\" aria-label=\"멤버변수의 초기화 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>멤버변수의 초기화 방법</h3>\n<h4 id=\"1-명시적-초기화\" style=\"position:relative;\"><a href=\"#1-%EB%AA%85%EC%8B%9C%EC%A0%81-%EC%B4%88%EA%B8%B0%ED%99%94\" aria-label=\"1 명시적 초기화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 명시적 초기화</h4>\n<p>변수를 선언과 동시에 초기화 하는 것</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> door <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//기본형 변수의 초기화</span>\r\n<span class=\"token class-name\">Engine</span> e <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Engine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//참조형 변수의 초기화</span></code></pre></div>\n<h4 id=\"2-초기화-블럭\" style=\"position:relative;\"><a href=\"#2-%EC%B4%88%EA%B8%B0%ED%99%94-%EB%B8%94%EB%9F%AD\" aria-label=\"2 초기화 블럭 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 초기화 블럭</h4>\n<ul>\n<li>클래스 초기화 블럭 : 클래스가 메모리에 처음 로딩될 때 한번만 수행</li>\n<li>인스턴스 초기화 블럭 : 인스턴스를 생성할때마다 수행</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">InitBlock</span><span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token keyword\">static</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">/* 클래스 초기화 블럭 */</span>  <span class=\"token punctuation\">}</span>\r\n\t\t<span class=\"token punctuation\">{</span>  <span class=\"token comment\">/* 인스턴스 초기화 블럭 */</span>  <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"3-생성자\" style=\"position:relative;\"><a href=\"#3-%EC%83%9D%EC%84%B1%EC%9E%90\" aria-label=\"3 생성자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 생성자</h4>\n<p>인스턴스 변수의 초기화</p>\n<h3 id=\"멤버변수의-초기화-시기와-순서\" style=\"position:relative;\"><a href=\"#%EB%A9%A4%EB%B2%84%EB%B3%80%EC%88%98%EC%9D%98-%EC%B4%88%EA%B8%B0%ED%99%94-%EC%8B%9C%EA%B8%B0%EC%99%80-%EC%88%9C%EC%84%9C\" aria-label=\"멤버변수의 초기화 시기와 순서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>멤버변수의 초기화 시기와 순서</h3>\n<p>클래스 변수 초기화 시점 : 클래스가 처음 로딩될 때 단 한번 초기화 된다.</p>\n<p>인스턴스 변수의 초기화 시점 : 인스턴스가 생성될 때마다 각 인스턴스별로 초기화가 이루어진다.</p>\n<p>클래스 변수의 초기화 순서 : 기본값 → 명시적 초기화 → 클래스 초기화 블럭</p>\n<p>인스턴스 변수의 초기화 순서 : 기본값 → 명시적 초기화 → 인스턴스 초기화 블럭 → 생성자</p>\n<h2 id=\"메소드\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EC%86%8C%EB%93%9C\" aria-label=\"메소드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메소드</h2>\n<p>특정 작업을 수행하는 일련의 문장들을 하나로 묶은 것</p>\n<h3 id=\"메소드를-사용하는-이유\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EC%86%8C%EB%93%9C%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-label=\"메소드를 사용하는 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메소드를 사용하는 이유</h3>\n<ol>\n<li>높은 재 사용성</li>\n<li>중복된 코드의 제거</li>\n<li>프로그램의 구조화</li>\n</ol>\n<h3 id=\"인자와-매개변수\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%9E%90%EC%99%80-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98\" aria-label=\"인자와 매개변수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인자와 매개변수</h3>\n<p>인자 : 메소드를 호출할 때 괄호 안에 지정해준 값\r\n매개변수 : 메소드에 사용되는 변수</p>\n<h3 id=\"클래스-메소드\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-label=\"클래스 메소드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스 메소드</h3>\n<ul>\n<li>static이 붙어있는 메소드</li>\n<li>인스턴스를 생성하지 않아도 사용할 수 있으며 인스턴스 변수는 사용할 수 없다.</li>\n<li>메소드내에서 인스턴스 변수를 사용하지 않는다면, static을 붙이는 것을 고려한다.</li>\n</ul>\n<h3 id=\"인스턴스-메소드\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-label=\"인스턴스 메소드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인스턴스 메소드</h3>\n<ul>\n<li>인스턴스를 생성해야만 호출이 가능하며, 인스턴스 변수를 사용할 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyMath2</span> <span class=\"token punctuation\">{</span>\r\n\t<span class=\"token keyword\">long</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span>\r\n\r\n\t<span class=\"token comment\">// 인스턴스변수 a, b만을 이용해서 작업하므로 매개변수가 필요없다.</span>\r\n\t<span class=\"token keyword\">long</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// a, b는 인스턴스변수</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n\r\n\t<span class=\"token comment\">// 인스턴스변수와 관계없이 매개변수만으로 작업이 가능하다.</span>\r\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span>   <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// a, b는 지역변수</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyMathTest2</span> <span class=\"token punctuation\">{</span>\r\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token comment\">// 클래스메소드 호출. 인스턴스 생성없이 호출가능</span>\r\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyMath2</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">200L</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n\t\t<span class=\"token class-name\">MyMath2</span> mm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyMath2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 인스턴스를 생성</span>\r\n\t\tmm<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">200L</span><span class=\"token punctuation\">;</span>\r\n\t\tmm<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token number\">100L</span><span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token comment\">// 인스턴스메소드는 객체생성 후에만 호출이 가능함.</span>\r\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>mm<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"클래스-멤버와-인스턴스-멤버간의-참조와-호출\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%A9%A4%EB%B2%84%EC%99%80-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EB%A9%A4%EB%B2%84%EA%B0%84%EC%9D%98-%EC%B0%B8%EC%A1%B0%EC%99%80-%ED%98%B8%EC%B6%9C\" aria-label=\"클래스 멤버와 인스턴스 멤버간의 참조와 호출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스 멤버와 인스턴스 멤버간의 참조와 호출</h2>\n<ul>\n<li>같은 클래스에 속한 멤버(메소드, 변수)들은 별도의 인스턴스를 생성하지 않고도 참조 또는 호출이 가능하다.</li>\n<li>인스턴스 멤버간의 호출 : 하나의 인스턴스 멤버가 존재한다는 것은 인스턴스가 이미 생성되어 있다는 것을 의미하며, 다른 인스턴스 멤버도 존재한다는 의미로 참조, 호출시 문제가 없음</li>\n<li>인스턴스 멤버에서 클래스 멤버를 호출 : 클래스 멤버는 언제나 참조, 호출이 가능하기 때문에 문제가 없음</li>\n<li>클래스 멤버에서 인스턴스 멤버를 호출 : 클래스 멤버가 존재하는 시점에 인스턴스 멤버가 존재하지 않을 수도 있기 때문에 문제 발생\n<ul>\n<li>같은 클래스내에서 클래스 멤버가 인스턴스 멤버를 참조, 호출해야 하는 경우는 드물며 이런 경우가 발생한다면 인스턴스 메소드로 작성해야할 메소드를 클래스 메소드로 작성한것은 아닌지 더 생각해봐야 함</li>\n</ul>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4\">클래스</a></p>\n<ul>\n<li><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EC%9D%98-%EB%98%90-%EB%8B%A4%EB%A5%B8-%EC%A0%95%EC%9D%98\">클래스의 또 다른 정의</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EA%B0%9D%EC%B2%B4\">객체</a></p>\n<ul>\n<li><a href=\"#%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EC%9D%98-%EC%83%9D%EC%84%B1%EA%B3%BC-%EC%82%AC%EC%9A%A9\">인스턴스의 생성과 사용</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%B3%80%EC%88%98\">변수</a></p>\n<ul>\n<li>\n<p><a href=\"#%EB%A9%A4%EB%B2%84%EB%B3%80%EC%88%98\">멤버변수</a></p>\n<ul>\n<li><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EB%B3%80%EC%88%98--%ED%81%B4%EB%9E%98%EC%8A%A4%EA%B0%80-%EB%A9%94%EB%AA%A8%EB%A6%AC%EC%97%90-%EB%A1%9C%EB%94%A9%EB%90%A0-%EB%95%8C-%EC%83%9D%EC%84%B1%EB%90%98%EC%96%B4-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%9D%B4-%EC%A2%85%EB%A3%8C%EB%90%A0-%EB%95%8C-%EA%B9%8C%EC%A7%80-%EC%9C%A0%EC%A7%80%EB%90%9C%EB%8B%A4\">클래스변수 : 클래스가 메모리에 로딩될 때 생성되어 프로그램이 종료될 때 까지 유지된다.</a></li>\n<li><a href=\"#%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EB%B3%80%EC%88%98--%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%98%81%EC%97%AD%EC%97%90-%EC%84%A0%EC%96%B8%EB%90%98%EB%A9%B0-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EB%A5%BC-%EC%83%9D%EC%84%B1%ED%95%A0-%EB%95%8C-%EB%A7%8C%EB%93%A4%EC%96%B4%EC%A7%84%EB%8B%A4\">인스턴스변수 : 클래스 영역에 선언되며, 인스턴스를 생성할 때 만들어진다.</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%A7%80%EC%97%AD%EB%B3%80%EC%88%98\">지역변수</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%B3%80%EC%88%98%EC%9D%98-%EC%B4%88%EA%B8%B0%ED%99%94\">변수의 초기화</a></p>\n<ul>\n<li>\n<p><a href=\"#%EB%A9%A4%EB%B2%84%EB%B3%80%EC%88%98%EC%9D%98-%EC%B4%88%EA%B8%B0%ED%99%94-%EB%B0%A9%EB%B2%95\">멤버변수의 초기화 방법</a></p>\n<ul>\n<li><a href=\"#1-%EB%AA%85%EC%8B%9C%EC%A0%81-%EC%B4%88%EA%B8%B0%ED%99%94\">1. 명시적 초기화</a></li>\n<li><a href=\"#2-%EC%B4%88%EA%B8%B0%ED%99%94-%EB%B8%94%EB%9F%AD\">2. 초기화 블럭</a></li>\n<li><a href=\"#3-%EC%83%9D%EC%84%B1%EC%9E%90\">3. 생성자</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%A9%A4%EB%B2%84%EB%B3%80%EC%88%98%EC%9D%98-%EC%B4%88%EA%B8%B0%ED%99%94-%EC%8B%9C%EA%B8%B0%EC%99%80-%EC%88%9C%EC%84%9C\">멤버변수의 초기화 시기와 순서</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%A9%94%EC%86%8C%EB%93%9C\">메소드</a></p>\n<ul>\n<li><a href=\"#%EB%A9%94%EC%86%8C%EB%93%9C%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\">메소드를 사용하는 이유</a></li>\n<li><a href=\"#%EC%9D%B8%EC%9E%90%EC%99%80-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98\">인자와 매개변수</a></li>\n<li><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%A9%94%EC%86%8C%EB%93%9C\">클래스 메소드</a></li>\n<li><a href=\"#%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EB%A9%94%EC%86%8C%EB%93%9C\">인스턴스 메소드</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%A9%A4%EB%B2%84%EC%99%80-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EB%A9%A4%EB%B2%84%EA%B0%84%EC%9D%98-%EC%B0%B8%EC%A1%B0%EC%99%80-%ED%98%B8%EC%B6%9C\">클래스 멤버와 인스턴스 멤버간의 참조와 호출</a></p>\n</li>\n</ul>\n</div>","excerpt":"클래스 클래스란 객체를 정의해 놓은 것이며, 객체를 생성하는데 사용된다.\r\n클래스를 잘 만들어 놓으면 객체를 생성할 때마다 고민을 할 필요가 없으며, 만들어 놓은 클래스로부터 객체를 생성해서 사용하기만 하면 된다. 우리는 JDK에서 제공하는 클래스들을 이용해서 쉽게 프로그램을 작성할 수 있다. 클래스의 또 다른 정의 데이터와 함수의 결합\r\n함수와 데이터는 관계가 깊기 때문에 자바에서는 변수와 함수를 하나의 클래스에 정의하여 관계가 깊은 변수와 함수를 함께 다룰 수 있게했다. 사용자 정의 타입\r\n사용자 정의 타입은 사용자가 기능 동작을 위한 데이터와 함수를 묶어서 정의하는 것이다. 객체 객체는 클래스의 정의된 내용대로 메모리에 생성된 것이다.\r\n클래스로부터 객체를 만드는 것을 클래스의 인스턴스화라고 하며, 어떤 클래스로부터 만들어진 객체를 그 클래스의 인스턴스라고 한다.\r\n객체는 포괄적인 의미를 가지고 있다면, 인스턴스는 객체보다 구체적인 의미인 어떤 클래스로부터 만들어진 것인지를 …","frontmatter":{"date":"May 27, 2023","title":"클래스, 메소드, 변수, 인스턴스, 객체","categories":"자바 자바의정석","author":"화나","emoji":"📚"},"fields":{"slug":"/java/java-class-instance/"}},"next":{"id":"cc3d75ca-df12-5da6-9dfe-1875ebae39fc","html":"<p><strong>메소드 내부에서 메소드 자신을 다시 호출하는 것</strong></p>\n<blockquote>\n<h3 id=\"어떻게-메소드가-자기-자신을-호출할-수-있는걸까\" style=\"position:relative;\"><a href=\"#%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%A9%94%EC%86%8C%EB%93%9C%EA%B0%80-%EC%9E%90%EA%B8%B0-%EC%9E%90%EC%8B%A0%EC%9D%84-%ED%98%B8%EC%B6%9C%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94%EA%B1%B8%EA%B9%8C\" aria-label=\"어떻게 메소드가 자기 자신을 호출할 수 있는걸까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>어떻게 메소드가 자기 자신을 호출할 수 있는걸까?</h3>\n<p>메소드 입장에서는 자기 자신을 호출하는 것과 다른 메소드를 호출하는 것은 차이가 없다. ‘메소드 호출’ 이라는 것이 특정 위치에 저장되어 있는 명령들을 수행하는 것일 뿐이기 때문</p>\n</blockquote>\n<p>호출된 메소드는 원래의 값이 아닌 복사된 값으로 작업하기 때문에 호출한 메소드와 관계없이 독립적인 작업 수행이 가능하다 : <code class=\"language-text\">값에 의한 호출(call by value)</code></p>\n<h2 id=\"재귀호출과-반복문\" style=\"position:relative;\"><a href=\"#%EC%9E%AC%EA%B7%80%ED%98%B8%EC%B6%9C%EA%B3%BC-%EB%B0%98%EB%B3%B5%EB%AC%B8\" aria-label=\"재귀호출과 반복문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>재귀호출과 반복문</h2>\n<p>재귀호출은 반복문과 유사한 점이 많으며, 대부분의 재귀호출은 반복문으로 작성하는것이 가능하다.\r\n어떤 작업을 반복적으로 처리해야한다면, 먼저 반복문으로 작성해보고 너무 복잡하다면 재귀호출로 간단하게 할 수 없는지 고민해봐야한다.\r\n반복문보다 재귀호출이 비효율적이므로 재귀호출에 드는 비용보다 재귀호출의 간결함이 주는 이득이 충분히 큰 경우에만 사용해야한다.</p>\n<h2 id=\"대표적인-재귀호출--팩토리얼\" style=\"position:relative;\"><a href=\"#%EB%8C%80%ED%91%9C%EC%A0%81%EC%9D%B8-%EC%9E%AC%EA%B7%80%ED%98%B8%EC%B6%9C--%ED%8C%A9%ED%86%A0%EB%A6%AC%EC%96%BC\" aria-label=\"대표적인 재귀호출  팩토리얼 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>대표적인 재귀호출 : 팩토리얼</h2>\n<p>팩토리얼은 한 숫자가 1이 될 때까지 1씩 감소시켜가면서 계속해서 곱해 나가는 것</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FactorialTest</span> <span class=\"token punctuation\">{</span>\r\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n\r\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token keyword\">long</span> result<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n\r\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//3</span>\r\n\r\n\t\t<span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//다시 자기 자신을 호출한다. //2</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol>\n<li><code class=\"language-text\">factorial(2)</code> 를 호출하면서 매개변수 n에 2가 복사된다.</li>\n<li><code class=\"language-text\">return 2 * factorial(1)</code> 로 인해서 <code class=\"language-text\">factorial(1)</code> 이 호출되고 매개변수 n에 1이 복사된다.</li>\n<li>if문이 참이므로 1을 반환하면서 메소드는 종료되며, <code class=\"language-text\">factorial(1)</code> 를 호출한 곳으로 돌아간다.</li>\n<li><code class=\"language-text\">return 2 * factorial(1)</code> → <code class=\"language-text\">return 2 * 1</code> 의 과정으로 계산되어 결과값 2가 반환된다.</li>\n</ol>\n<blockquote>\n<p>매개변수 n의 값이 0일경우 위 코드의 if문이 절대 참이 될 수 없기 때문에 계속해서 재귀호출만 일어날 뿐 메소드가 종료되지 않아서 스택에 계속 데이터가 쌓이게 되고 스택오버플로우 에러가 발생하게 된다. 이러한 에러를 방지하기 위해 매개변수의 유효성을 검사해야한다.</p>\n</blockquote>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%9E%AC%EA%B7%80%ED%98%B8%EC%B6%9C%EA%B3%BC-%EB%B0%98%EB%B3%B5%EB%AC%B8\">재귀호출과 반복문</a></li>\n<li><a href=\"#%EB%8C%80%ED%91%9C%EC%A0%81%EC%9D%B8-%EC%9E%AC%EA%B7%80%ED%98%B8%EC%B6%9C--%ED%8C%A9%ED%86%A0%EB%A6%AC%EC%96%BC\">대표적인 재귀호출 : 팩토리얼</a></li>\n</ul>\n</div>","frontmatter":{"date":"May 27, 2023","title":"재귀호출","categories":"자바 자바의정석","author":"화나","emoji":"📚"},"fields":{"slug":"/java/java-recursive-call/"}},"prev":{"id":"c0a96f69-96b3-51a1-b40d-97e56b2dac17","html":"<p>인스턴스가 생성될 때 호출되는 인스턴스 초기화 메소드</p>\n<h3 id=\"생성자의-조건\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EC%84%B1%EC%9E%90%EC%9D%98-%EC%A1%B0%EA%B1%B4\" aria-label=\"생성자의 조건 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생성자의 조건</h3>\n<ol>\n<li>생성자의 이름은 클래스 이름과 같아야 한다.</li>\n<li>생성자는 리턴값이 없다</li>\n</ol>\n<h3 id=\"생성자의-정의\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EC%84%B1%EC%9E%90%EC%9D%98-%EC%A0%95%EC%9D%98\" aria-label=\"생성자의 정의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생성자의 정의</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">클래스이름<span class=\"token punctuation\">(</span>타입 변수명<span class=\"token punctuation\">,</span> 타입 변수명<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t<span class=\"token comment\">//인스턴스 생성 시 수행 될 코드</span>\r\n    <span class=\"token comment\">//주로 인스턴스 변수의 초기화 코드를 적는다.</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>생성자도 오버로딩이 가능하므로 하나의 클래스의 여러개의 생성자가 존재할 수 있다.</p>\n<p><code class=\"language-text\">Card c = new Card();</code></p>\n<ul>\n<li>연산자 new에 의해서 메모리에 Card 클래스의 인스턴스가 생성된다.</li>\n<li>생성자 Card()가 호출되어 수행된다.</li>\n<li>인스턴스를 생성할 때 반드시 클래스 내에 정의된 생성자 중 하나를 선택하여 지정해주어야 한다.</li>\n</ul>\n<h3 id=\"기본생성자\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8%EC%83%9D%EC%84%B1%EC%9E%90\" aria-label=\"기본생성자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본생성자</h3>\n<ul>\n<li>컴파일할 때 <strong>클래스에 생성자가 하나도 정의되어 있지 않은 경우</strong> 컴파일러는 자동으로 기본 생성자를 추가하여 컴파일한다.</li>\n<li>컴파일러가 자동 추가해주는 기본생성자는 매개변수와 내용이 없다.\n<ul>\n<li><code class=\"language-text\">Card() { }</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"매개변수가-있는-생성자\" style=\"position:relative;\"><a href=\"#%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EA%B0%80-%EC%9E%88%EB%8A%94-%EC%83%9D%EC%84%B1%EC%9E%90\" aria-label=\"매개변수가 있는 생성자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>매개변수가 있는 생성자</h3>\n<ul>\n<li>매개변수가 있는 생성자를 사용한다면 인스턴스를 생성하는 동시에 원하는 값으로 초기화 할 수 있다.</li>\n</ul>\n<h3 id=\"생성자에서-다른-생성자-호출하기\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EC%84%B1%EC%9E%90%EC%97%90%EC%84%9C-%EB%8B%A4%EB%A5%B8-%EC%83%9D%EC%84%B1%EC%9E%90-%ED%98%B8%EC%B6%9C%ED%95%98%EA%B8%B0\" aria-label=\"생성자에서 다른 생성자 호출하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생성자에서 다른 생성자 호출하기</h3>\n<p>조건</p>\n<ul>\n<li>생성자의 이름으로 클래스이름 대신 this를 사용한다.</li>\n<li>반드시 첫 줄에서만 호출이 가능하다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Class</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">{</span>\r\n\t<span class=\"token class-name\">String</span> color<span class=\"token punctuation\">;</span>\r\n\t<span class=\"token class-name\">String</span> gearType<span class=\"token punctuation\">;</span>\r\n\t<span class=\"token keyword\">int</span> door<span class=\"token punctuation\">;</span>\r\n\r\n\t<span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"white\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"auto\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n\r\n\t<span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> color<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">,</span> <span class=\"token string\">\"auto\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n\r\n\t<span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> color<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> gearType<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> door<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color    <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gearType <span class=\"token operator\">=</span> gearType<span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>door     <span class=\"token operator\">=</span> door<span class=\"token punctuation\">;</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>기본 생성자를 호출하면 매개변수가 3개인 생성자를 호출하기 때문에 기본값으로 초기화 된다.</li>\n<li>서로 호출하도록 하여 연결해주면 더 좋은 코드를 얻을 수 있다.</li>\n</ul>\n<h4 id=\"참조변수-this\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0%EB%B3%80%EC%88%98-this\" aria-label=\"참조변수 this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조변수 this</h4>\n<ul>\n<li><code class=\"language-text\">this.color = color;</code> 에서 this는 인스턴스 변수와 지역변수를 구분하기 위한 키워드이다.</li>\n<li>this를 사용할 수 있는 것은 인스턴스 멤버뿐이다.</li>\n<li>this는 참조변수, this()는 생성자로 완전 다르다.</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EC%83%9D%EC%84%B1%EC%9E%90%EC%9D%98-%EC%A1%B0%EA%B1%B4\">생성자의 조건</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%83%9D%EC%84%B1%EC%9E%90%EC%9D%98-%EC%A0%95%EC%9D%98\">생성자의 정의</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B8%B0%EB%B3%B8%EC%83%9D%EC%84%B1%EC%9E%90\">기본생성자</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EA%B0%80-%EC%9E%88%EB%8A%94-%EC%83%9D%EC%84%B1%EC%9E%90\">매개변수가 있는 생성자</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%83%9D%EC%84%B1%EC%9E%90%EC%97%90%EC%84%9C-%EB%8B%A4%EB%A5%B8-%EC%83%9D%EC%84%B1%EC%9E%90-%ED%98%B8%EC%B6%9C%ED%95%98%EA%B8%B0\">생성자에서 다른 생성자 호출하기</a></p>\n<ul>\n<li><a href=\"#%EC%B0%B8%EC%A1%B0%EB%B3%80%EC%88%98-this\">참조변수 this</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"May 29, 2023","title":"생성자","categories":"자바 자바의정석","author":"화나","emoji":"📚"},"fields":{"slug":"/java/java-constructor/"}},"site":{"siteMetadata":{"siteUrl":"https://www.hwana.com","comments":{"utterances":{"repo":"hwana/hwana.github.io"}}}}},"pageContext":{"slug":"/java/java-class-instance/","nextSlug":"/java/java-recursive-call/","prevSlug":"/java/java-constructor/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}